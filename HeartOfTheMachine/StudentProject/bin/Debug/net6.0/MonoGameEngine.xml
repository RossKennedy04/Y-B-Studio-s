<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoGameEngine</name>
    </assembly>
    <members>
        <member name="T:MonoGameEngine.AudioManager">
            <summary>AudioManager exposes high-level functionality for controlling audio using MonoGame's underlying XNA architecture.</summary>
        </member>
        <member name="P:MonoGameEngine.AudioManager.Instance">
            <summary>Provides access to this <see cref="T:MonoGameEngine.AudioManager"/> object. The main way to use the built-in audio functionality.</summary>
        </member>
        <member name="P:MonoGameEngine.AudioManager.IgnoreYAxis">
            <summary>Control for whether or not the <see cref="T:MonoGameEngine.AudioManager"/> ignores the longitude of <see cref="T:MonoGameEngine.SFX"/> emitters when <see cref="P:MonoGameEngine.Settings.UsePositionalAudio"/> is enabled. 'false' by default.</summary>
        </member>
        <member name="P:MonoGameEngine.AudioManager.IgnoreXAxis">
            <summary>Control for whether or not the <see cref="T:MonoGameEngine.AudioManager"/> ignores the latitude of <see cref="T:MonoGameEngine.SFX"/> emitters when <see cref="P:MonoGameEngine.Settings.UsePositionalAudio"/> is enabled. 'false' by default.</summary>
        </member>
        <member name="M:MonoGameEngine.AudioManager.Update(System.Single)">
            <summary>
            A method to keep the <see cref="T:MonoGameEngine.AudioManager"/> up-to-date. <b>Called automatically by <see cref="T:MonoGameEngine.Core"/></b>.
            </summary>
            <param name="deltaTime">The current delta time of the frame.</param>
        </member>
        <member name="M:MonoGameEngine.AudioManager.LerpBGMVolume(System.Single)">
            <summary>
            Interpolates the volume of the current BGM. Creates a 'fade in' effect on the audio.
            </summary>
            <param name="deltaTime">The current delta time of the frame.</param>
        </member>
        <member name="M:MonoGameEngine.AudioManager.Refresh">
            <summary>
            Method used to check for finished <see cref="T:MonoGameEngine.SFX"/> objects, and disposes of them. 
            Also starts a BGM loop after a BGM intro finishes. 
            Invoked from Update().
            </summary>
        </member>
        <member name="M:MonoGameEngine.AudioManager.PlaySFX(MonoGameEngine.SFX,System.Single,MonoGameEngine.GameObject)">
            <summary>
            Play a pre-existing <see cref="T:MonoGameEngine.SFX"/> instance.
            </summary>
            <param name="soundEffect">An instance of a pre-existing <see cref="T:MonoGameEngine.SFX"/> object.</param>
            <param name="volume">[Optional The volume at which to play this SFX. Should be between 0.0f, and 1.0f. '1.0f' by default.</param>
            <param name="emitter">[Optional] The <see cref="T:MonoGameEngine.GameObject"/> that has emitted the sound effect.</param>
        </member>
        <member name="M:MonoGameEngine.AudioManager.PlaySFX(System.String,System.Single,MonoGameEngine.GameObject,MonoGameEngine.SFXOverlapRule,System.Boolean)">
            <summary>
            Play a new <see cref="T:MonoGameEngine.SFX"/> instance.
            </summary>
            <param name="filename">The name of the desired sound effect</param>
            <param name="volume">[Optional The volume at which to play this SFX. Should be between 0.0f, and 1.0f. '1.0f' by default.</param>
            <param name="emitter">[Optional] The <see cref="T:MonoGameEngine.GameObject"/> that has emitted the sound effect.</param>
            <param name="overlapRule">[Optional] Determines what happens if another <see cref="T:MonoGameEngine.SFX"/> instance of the same name is already active. Defaults to <see cref="F:MonoGameEngine.SFXOverlapRule.Overlay"/>.</param>
            <param name="blockBGM">[Optional] Determines if the sound effect should pause the current BGM while it plays. 'false' by default.</param>
        </member>
        <member name="M:MonoGameEngine.AudioManager.PlayBGM(System.String,System.Boolean,System.Boolean)">
            <summary>
            Plays a piece of music of the given filename, if it isn't already playing. Has some customisable options which can be ignored if not needed.
            </summary>
            <param name="filename">The name of the piece of music that should be played.</param>
            <param name="loop">[Optional] Should this piece of music loop infinitely? 'true' by default.</param>
            <param name="fadeIn">[Optional] Should this piece of music start with a 'fade in' effect? 'true' by default.</param>
        </member>
        <member name="M:MonoGameEngine.AudioManager.PlayBGMWithIntro(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Plays a piece of music (with an intro) of the given filenames, if it isn't already playing. 
            <br/>Has some customisable options which can be ignored if not needed.
            </summary>
            <param name="introName">The name of the intro/one-off track that should be played.</param>
            <param name="bgmName">The name of the main piece of music that should be played.</param>
            <param name="loop">[Optional] Should this piece of music loop infinitely? 'true' by default.</param>
            <param name="fadeIn">[Optional] Should this piece of music start with a 'fade in' effect? 'true' by default.</param>
        </member>
        <member name="M:MonoGameEngine.AudioManager.StopBGM">
            <summary>
            Stop the current BGM or BGM intro, if either exist.
            </summary>
        </member>
        <member name="M:MonoGameEngine.AudioManager.IsPlayingBGM">
            <summary>
            Check to see if a BGM loop or intro is playing currently.
            </summary>
            <returns>'true' if BGM loop or intro is playing.</returns>
        </member>
        <member name="M:MonoGameEngine.AudioManager.IsBGMFinished">
            <summary>
            Check to see if the most recent BGM has stopped playing.
            </summary>
            <returns>Returns 'true' if the current BGM has stopped and no intro is playing. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.AudioManager.GetCurrentBGMName">
            <summary>
            Get the current BGM's name.
            </summary>
            <returns>A string value containing the current BGM's name.</returns>
        </member>
        <member name="M:MonoGameEngine.AudioManager.IsSFXPlaying(System.String)">
            <summary>
            Check to see if an <see cref="T:MonoGameEngine.SFX"/> instance is currently playing with a given name.
            </summary>
            <param name="name">The name of the desired sound effect.</param>
            <returns>Returns 'true' if any <see cref="T:MonoGameEngine.SFX"/> instance with the given name is currently playing. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.AudioManager.PauseAll">
            <summary>
            Pause all currently playing BGM and <see cref="T:MonoGameEngine.SFX"/>.
            </summary>
        </member>
        <member name="M:MonoGameEngine.AudioManager.ResumeAll">
            <summary>
            Resume all currently paused BGM and <see cref="T:MonoGameEngine.SFX"/>.
            </summary>
        </member>
        <member name="M:MonoGameEngine.AudioManager.SetBGMVolume(System.Single)">
            <summary>
            Allows the volume of any currently playing BGM to be set. 0.0f (silent) -> 1.0f (full volume) is the expected range.
            </summary>
            <param name="volume">The desired volume of the BGM.</param>
        </member>
        <member name="M:MonoGameEngine.AudioManager.GetCurrentBGMVolume">
            <summary>
            Get the current volume level of the current BGM loop or intro.
            </summary>
            <returns>Returns -1 if no BGM is playing. Otherwise returns a floating-point value between 0.0f and 1.0f representing the volume of the audio file.</returns>
        </member>
        <member name="M:MonoGameEngine.AudioManager.SetBGMPitch(System.Single)">
            <summary>
            Allows the pitch of any currently playing BGM. 0.0f is the default. -1.0f -> 1.0f is the acceptable range of pitch.
            </summary>
            <param name="pitch">The value  desired pitch of the audio file. </param>
        </member>
        <member name="M:MonoGameEngine.AudioManager.PreLoadSFX(System.String)">
            <summary>
            Allows an audio file to be loaded into the game before being played. This method should be called if your audio files are being delayed when first played.
            </summary>
            <param name="filename">The name of the desired sound effect.</param>
        </member>
        <member name="T:MonoGameEngine.SFXOverlapRule">
            <summary>
            Controls how sound effects are handled when a request to play an existing sound is made.
            <br/>- <strong>Ignore</strong> discards any extra sfx of the same name. 
            <br/>- <strong>Overwrite</strong> replaces the current instance of the sfx.
            <br/>- <strong>Overlay</strong> allows multiples of a single sfx to play at once.
            </summary>
        </member>
        <member name="F:MonoGameEngine.SFXOverlapRule.Ignore">
            <summary>Discards any extra sfx of the same name</summary>
        </member>
        <member name="F:MonoGameEngine.SFXOverlapRule.Overwrite">
            <summary>Replaces the current instance of the sfx</summary>
        </member>
        <member name="F:MonoGameEngine.SFXOverlapRule.Overlay">
            <summary>Allows multiples of a single sfx to play at once.</summary>
        </member>
        <member name="T:MonoGameEngine.SFX">
            <summary>A class representing an audio asset within the game engine. Can be used for BGM as well as sound effects.</summary>
        </member>
        <member name="M:MonoGameEngine.SFX.Dispose">
            <summary>
            Method used to clean the memory allocated for this sound effect.
            </summary>
        </member>
        <member name="M:MonoGameEngine.SFX.IsPlaying">
            <summary>
            Getter method which checks to see if this <see cref="T:MonoGameEngine.SFX"/> is currently playing.
            </summary>
            <returns>Returns 'true' if the <see cref="T:MonoGameEngine.SFX"/> is active. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.SFX.IsStopped">
            <summary>
            Getter method which checks to see if this <see cref="T:MonoGameEngine.SFX"/> is currently stopped.
            </summary>
            <returns>Returns 'true' if the <see cref="T:MonoGameEngine.SFX"/> is not currently playing. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.SFX.GetName">
            <summary>
            Getter method which returns the name associated with this <see cref="T:MonoGameEngine.SFX"/>.
            </summary>
            <returns>A string object representing the name of this <see cref="T:MonoGameEngine.SFX"/>'s audio file.</returns>
        </member>
        <member name="M:MonoGameEngine.SFX.Play">
            <summary>
            Starts playing the audio file held by this <see cref="T:MonoGameEngine.SFX"/>.
            </summary>
        </member>
        <member name="M:MonoGameEngine.SFX.Stop">
            <summary>
            Stops the audio file held by this <see cref="T:MonoGameEngine.SFX"/>.
            </summary>
        </member>
        <member name="M:MonoGameEngine.SFX.Pause">
            <summary>
            Pauses the audio file held by this <see cref="T:MonoGameEngine.SFX"/>. If resumed, file will continue from where it paused.
            </summary>
        </member>
        <member name="M:MonoGameEngine.SFX.Resume">
            <summary>
            Resumes playback of the audio file if it was previously paused. Will resume from the point it was paused.
            </summary>
        </member>
        <member name="M:MonoGameEngine.SFX.IsLooping">
            <summary>
            Getter method which checks if this <see cref="T:MonoGameEngine.SFX"/> will has looping playback enabled.
            </summary>
            <returns>A boolean value representing whether or not the audio will repeat when finished.</returns>
        </member>
        <member name="M:MonoGameEngine.SFX.WillBlockBGM">
            <summary>
            Getter method which checks if this <see cref="T:MonoGameEngine.SFX"/> will pause any background music when played.
            </summary>
            <returns>A boolean value representing whether or not the audio pauses existing background music while playing.</returns>
        </member>
        <member name="M:MonoGameEngine.SFX.GetState">
            <summary>
            Getter method which returns the SoundState of this <see cref="T:MonoGameEngine.SFX"/>. Useful for digging into the state of this object a little deeper.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Audio.SoundState"/> enum which contains the underlying state of this <see cref="T:MonoGameEngine.SFX"/>'s audio.</returns>
        </member>
        <member name="M:MonoGameEngine.SFX.SetVolume(System.Single)">
            <summary>
            Setter method which can adjust the playback volume of this <see cref="T:MonoGameEngine.SFX"/>'s audio.
            </summary>
            <param name="volume">The volume at which to play this <see cref="T:MonoGameEngine.SFX"/>'s audio. Should be between 0.0f and 1.0f.</param>
        </member>
        <member name="M:MonoGameEngine.SFX.GetVolume">
            <summary>
            Getter method which returns the current volume that this <see cref="T:MonoGameEngine.SFX"/> is playing at.
            </summary>
            <returns>A floating-point value (between 0.0f and 1.0f) that represents the volume of this <see cref="T:MonoGameEngine.SFX"/>'s audio playback.</returns>
        </member>
        <member name="M:MonoGameEngine.SFX.SetPitch(System.Single)">
            <summary>
            Setter method which can adjust the pitch (and playback speed) of this <see cref="T:MonoGameEngine.SFX"/> audio.
            </summary>
            <param name="pitch">The pitch at which to play this <see cref="T:MonoGameEngine.SFX"/>'s audio.</param>
        </member>
        <member name="M:MonoGameEngine.SFX.SetPan(System.Single)">
            <summary>
            Setter method which can adjust the horizontal pan of this <see cref="T:MonoGameEngine.SFX"/> audio.
            </summary>
            <param name="pan"></param>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObjects.Components.DrawableComponent.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            A simple Draw method to quickly get a sprite onto the game screen.
            </summary>
            <param name="spriteBatch">The utility used to render sprites within MonoGame.</param>
            <param name="position">The position, in pixels, to draw the sprite on-screen.</param>
            <param name="image">The desired sprite image.</param>
            <param name="color">[Optional] The base colour of the image.</param>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObjects.Components.DrawableComponent.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteFont,System.String,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            A simple Draw method to quickly get text onto the game screen.
            </summary>
            <param name="spriteBatch">The utility used to render sprites within MonoGame.</param>
            <param name="position">The position, in pixels, to draw the sprite on-screen.</param>
            <param name="font">The desired SpriteFont to use.</param>
            <param name="text">The string of text that should be rendered.</param>
            <param name="color">[Optional] The base colour of the text.</param>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObjects.Components.DrawableComponent.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            Draw method for rendering a specific frame of animation within a spritesheet.
            </summary>
            <param name="spriteBatch">The utility used to render sprites within MonoGame.</param>
            <param name="drawLocation">Represents where on screen to draw the animation frame. Handles position, width and height.</param>
            <param name="animationFrame">The dimensions, in pixels, of the animation frame within the spritesheet</param>
            <param name="spritesheet">The full source spritesheet image.</param>
            <param name="color">[Optional] The base colour of the image.</param>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObjects.Components.InputComponent.Update(System.Single)">
            <summary>
            Automatically updates this Component's Keyboard state and tries to handle any relevant inputs. Can be overridden.
            </summary>
            <param name="deltaTime">The amount of time that has passed since the last frame, in seconds. Taken from MonoGame's GameTime object.</param>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObjects.Components.InputComponent.HandleInput(System.Single)">
            <summary>
            Allows the component to recognise key presses and respond as appropriate.
            </summary>
            /// <param name="deltaTime">The amount of time that has passed since the last frame, in seconds. Taken from MonoGame's GameTime object.</param>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObjects.Components.InputComponent.IsKeyPressed(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Determines whether or not this is the first frame that the given key has been pushed.
            </summary>
            <param name="key">The specific keyboard key of interest.</param>
            <returns>Returns 'true' if the given key was not down last frame; otherwise returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObjects.Components.InputComponent.IsKeyHeld(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Determines whether or not the given key is being pushed, and was also pushed last frame.
            </summary>
            <param name="key">The specific keyboard key of interest.</param>
            <returns>Returns 'true' if the given key is currently down, and was also down last frame; otherwise returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObjects.Components.InputComponent.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Determines whether or not the given key is currently pushed, irrespective of its previous state.
            </summary>
            <param name="key">The specific keyboard key of interest.</param>
            <returns>Returns 'true' if the given key is currently down, regardless of if it was down last frame or not; otherwise returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObjects.Components.InputComponent.IsKeyReleased(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Determines whether or not the given key was released within the last frame.
            </summary>
            <param name="key">The specific keyboard key of interest.</param>
            <returns>Returns 'true' if the given key was down last frame, but is currently released; otherwise returns 'false'.</returns>
        </member>
        <member name="F:MonoGameEngine.ComponentCore.GameObject._components">
            <summary>
            A collection of all the Components attached to this GameObject. 
            </summary>
        </member>
        <member name="F:MonoGameEngine.ComponentCore.GameObject._gameCore">
            <summary>
            A reference to the GameCore, allowing access to some high-level functionality.
            </summary>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObject.SendMessage(MonoGameEngine.ComponentCore.MessageType,System.String)">
            <summary>
            Method used to send a message to all of this GameObject's Components.
            </summary>
            <param name="messageType">The MessageType allows Components to ignore or listen for specific kinds of messages.</param>
            <param name="message"></param>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObject.AddComponent(MonoGameEngine.ComponentCore.GameObjects.Components.Component)">
            <summary>
            Used to assign a new Component to this GameObject.
            </summary>
            <param name="component">A Component instance must be assigned.</param>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.GameObject.GetComponent``1">
            <summary>
            Retrieve an assigned Component of the requested type, if one exists.
            </summary>
            <typeparam name="T">The type of Component that you would like to look for.</typeparam>
            <returns>Returns the requested Component if found; otherwise, returns 'null' if no Component of the requested type belongs to this GameObject.</returns>
        </member>
        <member name="F:MonoGameEngine.ComponentCore.Screens.Screen._core">
            <summary>
            A reference to the GameCore, allowing access to some high-level functionality.
            </summary>
        </member>
        <member name="F:MonoGameEngine.ComponentCore.Screens.Screen._gameObjects">
            <summary>
            A collection of all the GameObjects existing in this Screen. All new GameObjects should be placed in this collection for automatic updating and rendering.
            </summary>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.Screens.Screen.AddObject(MonoGameEngine.ComponentCore.GameObject)">
            <summary>
            Allows a GameObject to be added to the automatic update and render collection.
            </summary>
            <param name="obj">The new GameObject for the Screen to handle.</param>
        </member>
        <member name="M:MonoGameEngine.ComponentCore.Screens.Screen.GetObjects">
            <summary>
            Allows access to the entire collection of GameObjects currently handled by the Screen.
            </summary>
            <returns>A standard array of GameObjects.</returns>
        </member>
        <member name="T:MonoGameEngine.ComponentCore.MessageType">
            <summary></summary>
        </member>
        <member name="T:MonoGameEngine.Core">
            <summary>A class which represents the highest-level functionality of a game project.</summary>
        </member>
        <member name="M:MonoGameEngine.Core.#ctor">
            <summary>The constructor for this class.</summary>
        </member>
        <member name="M:MonoGameEngine.Core.Initialize">
            <summary>Performs initial setup for various systems. <br/><b>Should always call base.Initialize() in derived classes.</b></summary>
        </member>
        <member name="M:MonoGameEngine.Core.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:MonoGameEngine.Core.SwapScreen">
            <summary>
            Performs the actual hand-off of an instantiated new <see cref="T:MonoGameEngine.Screen"/> to the <see cref="T:MonoGameEngine.Core"/>'s managed reference.
            </summary>
        </member>
        <member name="M:MonoGameEngine.Core.StartScreen``1">
            <summary>
            This method allows a new <see cref="T:MonoGameEngine.Screen"/> derivative to be created and start running in place of the current one, if one exists.
            </summary>
            <typeparam name="TScreen">The Type of <see cref="T:MonoGameEngine.Screen"/> that you would like to start.</typeparam>
        </member>
        <member name="M:MonoGameEngine.Core.UpdateScreen(System.Single)">
            <summary>
            Handles the top-level <see cref="T:MonoGameEngine.Screen"/> instance operation.
            </summary>
            <param name="deltaTime">The time (in seconds) since the last frame of the game.</param>
        </member>
        <member name="M:MonoGameEngine.Core.GetContent">
            <summary>
            A getter method for this <see cref="T:MonoGameEngine.Core"/>'s <see cref="T:Microsoft.Xna.Framework.Content.ContentManager"/>.
            </summary>
            <returns>Returns the game's <see cref="T:Microsoft.Xna.Framework.Content.ContentManager"/> instance.</returns>
        </member>
        <member name="M:MonoGameEngine.Core.GetResource``1(System.String)">
            <summary>
            Handles the loading of a desired resource. 
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the resource required.</typeparam>
            <param name="resourceName">The name of the desired resource. Filetype suffix is not required.</param>
            <returns>Returns the requested media resource if found, otherwise throws an error.</returns>
        </member>
        <member name="M:MonoGameEngine.Core.GetWindow">
            <summary>
            A getter method for this <see cref="T:MonoGameEngine.Core"/>'s <see cref="T:Microsoft.Xna.Framework.GameWindow"/>.
            </summary>
            <returns>Returns the game's <see cref="T:Microsoft.Xna.Framework.GameWindow"/> instance.</returns>
        </member>
        <member name="M:MonoGameEngine.Core.GetRandomNumber(System.Int32)">
            <summary>
            A method which generates a pseudo-random integer value from lower bound to the upper bound provided.
            </summary>
            <param name="max">The upper bound to the random number generation (non-inclusive). If a value below 0 is entered, the maximum bound will be set to 0.</param>
            <returns>Returns a whole number within the established range.</returns>
        </member>
        <member name="M:MonoGameEngine.Core.GetRandomNumber(System.Int32,System.Int32)">
            <summary>
            [Overload] A method which generates a pseudo-random integer value from 0 to the upper bound provided.<br/>If the min is greater than the max provided, the two values will be swapped.
            </summary>
            <param name="min">The lower bound of the random number generation (inclusive).</param>
            <param name="max">The upper bound to the random number generation (non-inclusive). If a value below 0 is entered, the maximum bound will be set to 0.</param>
            <returns>Returns a whole number within the established range.</returns>
        </member>
        <member name="M:MonoGameEngine.Core.GetRandomNumber(System.Single)">
            <summary>
            [Overload] A method which generates a pseudo-random floating-point value from 0 to the upper bound provided.
            </summary>
            <param name="max">The upper bound to the random number generation (non-inclusive). If a value below 0 is entered, the maximum bound will be set to 0.</param>
            <returns>Returns a floating-point number within the established range.</returns>
        </member>
        <member name="M:MonoGameEngine.Core.GetRandomNumber(System.Single,System.Single)">
            <summary>
            [Overload] A method which generates a pseudo-random floating-point value from the lower bound to the upper bound provided.<br/>If the min is greater than the max provided, the two values will be swapped.
            </summary>
            <param name="min">The lower bound of the random number generation (inclusive).</param>
            <param name="max">The upper bound to the random number generation (non-inclusive). If a value below 0 is entered, the maximum bound will be set to 0.</param>
            <returns>Returns a floating-point number within the established range.</returns>
        </member>
        <member name="M:MonoGameEngine.Core.EndGame">
            <summary>
            The game will stop updating once this method is called.
            </summary>
        </member>
        <member name="M:MonoGameEngine.Core.CloseGame">
            <summary>
            The game will completely close once this method is called.
            </summary>
        </member>
        <member name="M:MonoGameEngine.Core.PrintFPS">
            <summary>
            An estimation of the current FPS (frames per second) will be printed to the program's output window.
            </summary>
        </member>
        <member name="M:MonoGameEngine.Core.Schedule(System.Object,System.String,System.Object[],System.Single)">
            <summary>
            The <see cref="T:MonoGameEngine.Core"/> will call the method belonging to the specified object after the specified time has elapsed. <br/><b>Note:</b> This is an expensive way to call the desired method, and should only be used as a last resort.
            </summary>
            <param name="callingObject">The object that the desired method belongs to.</param>
            <param name="methodName">The name of the method that should be called, which belongs to the given object.</param>
            <param name="arguments">A generic array of values that should be handed to the desired method when invoked. The values should be in the same order and of the same type as the method would normally receive.</param>
            <param name="scheduleFor">The time, in seconds, that should be waited before the method is invoked.</param>
        </member>
        <member name="M:MonoGameEngine.Core.Schedule(System.Object,System.String,System.Object,System.Single)">
            <summary>
            [Overload] The <see cref="T:MonoGameEngine.Core"/> will call the method belonging to the specified object after the specified time has elapsed. <br/><b>Note:</b> This is an expensive way to call the desired method, and should only be used as a last resort.
            </summary>
            <param name="callingObject">The object that the desired method belongs to.</param>
            <param name="methodName">The name of the method that should be called, which belongs to the given object.</param>
            <param name="argument">A generic value that should be handed to the desired method when invoked. The value supplied should be of the same type as the desired method would normally expect.</param>
            <param name="scheduleFor">The time, in seconds, that should be waited before the method is invoked.</param>
        </member>
        <member name="M:MonoGameEngine.Core.Pause(System.Single)">
            <summary>
            The game's entire update will pause for the requested duration (in seconds). Duration should be greater than 0. <br/>
            <strong>NOTE:</strong> This will also pause <see cref="T:MonoGameEngine.AudioManager"/>, <see cref="T:MonoGameEngine.Transition"/> and <see cref="T:MonoGameEngine.Camera"/>, along with <see cref="T:MonoGameEngine.GameInput"/>.
            </summary>
            <param name="duration">The timeframe (in seconds) that the game should pause for.</param>
        </member>
        <member name="P:MonoGameEngine.Core.RootContentDirectory">
            <summary>
            Property which provides the directory to the root Content folder of this project.
            </summary>
        </member>
        <member name="T:MonoGameEngine.Extensions">
            <summary>Class which provides additional (extended) functionality for several other classes.</summary>
        </member>
        <member name="M:MonoGameEngine.Extensions.DrawRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            Draws a filled rectangle at the given position with the dimensions requested.
            </summary>
            <param name="spriteBatch">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> currently being used to batch for rendering.</param>
            <param name="position">The position on-screen that the rectangle should be drawn at.</param>
            <param name="width">The desired width of the rectangle to be drawn.</param>
            <param name="height">The desired height of the rectangle to be drawn.</param>
            <param name="colour">[Optional] The desired rendering colour.</param>
        </member>
        <member name="M:MonoGameEngine.Extensions.DrawRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Rectangle,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            [Overload] Draws a filled rectangle using the given dimensions.
            </summary>
            <param name="spriteBatch">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> currently being used to batch for rendering.</param>
            <param name="rectangle">The dimensions of the rectangle to be drawn.</param>
            <param name="color">[Optional] The desired rendering colour.</param>
        </member>
        <member name="M:MonoGameEngine.Extensions.DrawLine(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            Draws a line segment from point1 to point 2.
            </summary>
            <param name="spriteBatch">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> currently being used to batch for rendering.</param>
            <param name="point1">The starting point of the desired line segment.</param>
            <param name="point2">The ending point of the desired line segment.</param>
            <param name="thickness">[Optional] The thickness of the line. 1.0f by default.</param>
            <param name="colour">[Optional] The desired rendering colour.</param>
        </member>
        <member name="M:MonoGameEngine.Extensions.DrawCircle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Int32,System.Single,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            Draws a circle at a given origin with the requested radius. The circle will look smoother depending on how many points are requested.
            </summary>
            <param name="spriteBatch">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> currently being used to batch for rendering.</param>
            <param name="origin">The center point that the circle should use for rendering.</param>
            <param name="radius">The radius of the desired circle to be rendered.</param>
            <param name="points">[Optional] The number of points that make up the circle. 24 by default. The minimum acceptable number of points is 3.</param>
            <param name="thickness">[Optional] The thickness of the circle outline. 1.0f by default.</param>
            <param name="colour">[Optional] The desired rendering colour.</param>
        </member>
        <member name="M:MonoGameEngine.Extensions.Capitalise(System.String)">
            <summary>
            Converts a given string value into a form where the first character is uppercase, and the rest are lowercase.
            </summary>
            <param name="before">The string value before the capitalisation process begins.</param>
            <returns>Returns a string value where the first char has been capitalised and the rest converted to lowercase.</returns>
        </member>
        <member name="M:MonoGameEngine.Extensions.LinearConversion(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts the given value into a new range from an old one, maintaining the previous ratio.
            </summary>
            <param name="value">The value to convert</param>
            <param name="oldMin">The old range's minimum value.</param>
            <param name="oldMax">The old range's maximum value.</param>
            <param name="newMin">The new range's minimum value.</param>
            <param name="newMax">The new range's maximum value.</param>
            <returns>Returns a whole number in the new range, based on the ratio of the old range and the provided value.</returns>
        </member>
        <member name="M:MonoGameEngine.Extensions.LinearConversion(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            [Overload] Converts the given value into a new range from an old one, maintaining the previous ratio.
            </summary>
            <param name="value">The value to convert</param>
            <param name="oldMin">The old range's minimum value.</param>
            <param name="oldMax">The old range's maximum value.</param>
            <param name="newMin">The new range's minimum value.</param>
            <param name="newMax">The new range's maximum value.</param>
            <returns>Returns a decimal number in the new range, based on the ratio of the old range and the provided value.</returns>
        </member>
        <member name="M:MonoGameEngine.Extensions.LinearConversion(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            [Overload] Converts the given value into a new range from an old one, maintaining the previous ratio.
            </summary>
            <param name="value">The value to convert</param>
            <param name="oldMin">The old range's minimum value.</param>
            <param name="oldMax">The old range's maximum value.</param>
            <param name="newMin">The new range's minimum value.</param>
            <param name="newMax">The new range's maximum value.</param>
            <returns>Returns a decimal number in the new range, based on the ratio of the old range and the provided value.</returns>
        </member>
        <member name="M:MonoGameEngine.Extensions.ToVector2(Microsoft.Xna.Framework.Point)">
            <summary>
            Creates a <see cref="T:Microsoft.Xna.Framework.Vector2"/> object using the co-ordinates of this <see cref="T:Microsoft.Xna.Framework.Point"/>.
            </summary>
            <param name="point">The <see cref="T:Microsoft.Xna.Framework.Point"/> instance.</param>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2"/> object containing the same co-ordinates as the provided <see cref="T:Microsoft.Xna.Framework.Point"/>.</returns>
        </member>
        <member name="M:MonoGameEngine.Extensions.CreateBlankTexture(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Creates a blank, white, 1x1 <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>.
            </summary>
            <param name="spriteBatch">The game's current SpriteBatch instance.</param>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> reference to a blank white texture.</returns>
        </member>
        <member name="T:MonoGameEngine.FixedSizeLinkedList`1">
            <summary>
            A class representing a LinkedList data structure, with a fixed number of elements of a shared type.
            </summary>
            <typeparam name="T">The datatype of elements this data structure should hold.</typeparam>
        </member>
        <member name="M:MonoGameEngine.FixedSizeLinkedList`1.#ctor(System.Int32)">
            <summary>
            The constructor for this object.
            </summary>
            <param name="size">The starting size of this data structure.</param>
        </member>
        <member name="M:MonoGameEngine.FixedSizeLinkedList`1.Push(`0)">
            <summary>
            Adds a new element to the end of this data structure. 
            <br/>If this addition would exceed the maximum number of elements this structure can hold, the first element in the structure will be dropped.
            </summary>
            <param name="item">The element that should be added to this data structure.</param>
        </member>
        <member name="M:MonoGameEngine.FixedSizeLinkedList`1.Pop">
            <summary>
            Removes the element at the end of this data structure, if one exists.
            </summary>
            <returns>An object of the type held by this structure that was most recently added if one exists. Otherwise, returns a default value.</returns>
        </member>
        <member name="M:MonoGameEngine.FixedSizeLinkedList`1.SetSize(System.Int32)">
            <summary>
            A setter method which sets the maximum number of elements this FixedSizeLinkedList can hold.
            </summary>
            <param name="size">The new number of elements this data structure should hold.</param>
        </member>
        <member name="T:MonoGameEngine.DataManagement.SaveFile">
            <summary>A class that can contain any necessary saved data for a game project. Generally used in conjunction with <see cref="T:MonoGameEngine.DataManagement.SaveManager"/>.</summary>
        </member>
        <member name="F:MonoGameEngine.DataManagement.SaveFile._savedData">
            <summary>The data structure which holds all of the requested data. Set up as a key/value pair, where the value can be of varying data types.</summary>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveFile.#ctor(System.Int32)">
            <summary>
            Internal constructor method.
            </summary>
            <param name="fileIndex">Used to identify different saved files.</param>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveFile.AddData(System.String,System.Object)">
            <summary>
            Adds data to this <see cref="T:MonoGameEngine.DataManagement.SaveFile"/>, using a Key/Value Pair.
            <br/>If the key already exists, the held value at the given key will be overwritten instead.
            </summary>
            <param name="key">The identifying key to this piece of data.</param>
            <param name="value">The data value you wish to store. This can be any primitive data type.</param>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveFile.RemoveData(System.String)">
            <summary>
            Removes data from this <see cref="T:MonoGameEngine.DataManagement.SaveFile"/> with a given key, if any exists.
            </summary>
            <param name="key">The identifying key to the piece of data that should be removed.</param>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveFile.GetData``1(System.String)">
            <summary>
            Returns a piece of data with the associated given key, if that key exists within this <see cref="T:MonoGameEngine.DataManagement.SaveFile"/>.
            </summary>
            <typeparam name="T">The data type of the data that has been requested.</typeparam>
            <param name="key">The identifying key to the desired piece of data.</param>
            <returns>The piece of data for the given key (if it exists), cast as the requested 'T' data type. Otherwise, returns appropriately-typed 'empty' data.</returns>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveFile.GetIndex">
            <summary>
            Getter method used to access the file index of this <see cref="T:MonoGameEngine.DataManagement.SaveFile"/>.
            </summary>
            <returns>The numerical index for this file.</returns>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveFile.ToString">
            <summary>
            Converts this <see cref="T:MonoGameEngine.DataManagement.SaveFile"/> object into a string, which can be written to an external text file.
            </summary>
            <returns>A string representation of the data held within this <see cref="T:MonoGameEngine.DataManagement.SaveFile"/> object.</returns>
        </member>
        <member name="T:MonoGameEngine.DataManagement.SaveManager">
            <summary>A class which provides access to input/output needed for managing saved game data (using the <see cref="T:MonoGameEngine.DataManagement.SaveFile"/> class).</summary>
        </member>
        <member name="P:MonoGameEngine.DataManagement.SaveManager.CurrentSave">
            <summary>Property that provides easy access to the most recently loaded <see cref="T:MonoGameEngine.DataManagement.SaveFile"/>.</summary>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveManager.Save(MonoGameEngine.DataManagement.SaveFile,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Will save the passed Object to the allocated directory.
            </summary>
            <param name="saveFile">[Optional] The <see cref="T:MonoGameEngine.DataManagement.SaveFile"/> which should be stored as a file on the machine's memory.</param>
            <param name="fileIndex">[Optional]An ID used to differentiate between different save files. Will use current save index if left empty.</param>
            <param name="append">[Optional] Should the save create a new file, or add to an existing one?</param>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveManager.Delete(System.Int32)">
            <summary>
            Will delete the save file at the given index, if it exists.
            </summary>
            <param name="fileIndex">The index of the file that should be deleted.</param>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveManager.Load(System.Int32)">
            <summary>
            Will load the desired <see cref="T:MonoGameEngine.DataManagement.SaveFile"/>, if it exists. 
            </summary>
            <param name="fileIndex">The index of the file that should be loaded.</param>
            <returns>The SaveFile object holding the restored data at the given index, if it exists. Otherwise, returns an empty <see cref="T:MonoGameEngine.DataManagement.SaveFile"/> for that index.</returns>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveManager.CreateDirectory(System.String)">
            <summary>
            Will create a location for files to be saved at the given directory, if one doesn't already exist.
            </summary>
            <param name="directory">The directory of the desired folder structure. Uses current directory of program as a root. </param>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveManager.CheckFileExists(System.String)">
            <summary>
            Checks to see if a file with the given filename exists. The filename should include the directory the file belongs to.
            </summary>
            <param name="filename">The filename of the file that should be checked. </param>
            <returns>Returns 'true' if a file with the given name exists. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveManager.GenerateFileDirectoryString">
            <summary>
            Creates a single string which describes the full directory filepath.
            </summary>
            <returns>A string object with the full directory filepath, assuming the main program folder as the root.</returns>
        </member>
        <member name="M:MonoGameEngine.DataManagement.SaveManager.GenerateFilePath(System.Int32)">
            <summary>
            Creates a single string which describes the full directory filepath, plus the full file name.
            </summary>
            <param name="fileIndex">The specific save file ID that is desired. </param>
            <returns>A String object with the full directory filepath and file name, assuming the main program folder as the root.</returns>
        </member>
        <member name="T:MonoGameEngine.Settings">
            <summary>A handler class which manages several key settings for a game project.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.ScreenDimensions">
            <summary>Property representing the game window's current dimensions. 1280x720px by default.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.IsFullscreen">
            <summary>Property representing the game's fullscreen state. Set to 'false' by default.<br/><b>Note: Proper fullscreen rendering is only supported in Release builds.</b></summary>
        </member>
        <member name="P:MonoGameEngine.Settings.IsMouseVisible">
            <summary>Property representing whether or not the mouse will appear above the game window.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.Vsync">
            <summary>Property representing the game's vsync flag. True by default.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.TargetFrameRate">
            <summary>Property representing the desired framerate for the game. Change this if the game is being run on weaker hardware. 60 by default. Values of below 0 will be clamped.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.IsBorderless">
            <summary>Property representing the game's window border flag. False by default.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.BackgroundFill">
            <summary>Property representing the game window's background colour. CornflowerBlue by default.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.LetterboxFill">
            <summary>Property representing the game window's letterboxing colour. Black by default.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.UseAntiAliasing">
            <summary>Property representing whether or not anti-aliasing (MSAA) is being applied to the game window.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.BGMVolume">
            <summary>Property representing the current BGM' volume, which is clamped between 0.0f and 1.0f. '1.0f' by default.</summary>
        </member>
        <member name="P:MonoGameEngine.Settings.GameSpeed">
            <summary>Property representing a global multiplier applied to deltaTime. 1.0f by default. Property is automatically clamped between 0.25f and 4.0f.<br/><u>Does not affect framerate/FPS. Only natively affects values relating to deltaTime.</u></summary>
        </member>
        <member name="P:MonoGameEngine.Settings.UsePositionalAudio">
            <summary>Property representing whether or not the game should pan and scale the volume of sound effects in the game based on the position of the camera. False by default.</summary>
        </member>
        <member name="M:MonoGameEngine.Settings.Initialise(MonoGameEngine.Core,Microsoft.Xna.Framework.GraphicsDeviceManager)">
            <summary>Function for initial setup of the game's Settings. <b>Can only be called once, and this is done automatically by the game's <see cref="T:MonoGameEngine.Core"/></b>.</summary>
            <param name="graphics">The graphics manager for the game. Instance should be created by <see cref="T:MonoGameEngine.Core"/>.</param>
            <param name="core">The <see cref="T:MonoGameEngine.Core"/> instance at the center of this game project.</param>
        </member>
        <member name="T:MonoGameEngine.Camera">
            <summary>A class which provides access to the 2D <see cref="T:MonoGameEngine.Camera"/> instance used to view the game scene.</summary>
        </member>
        <member name="P:MonoGameEngine.Camera.Instance">
            <summary>Provides access to this <see cref="T:MonoGameEngine.Camera"/> object.</summary>
        </member>
        <member name="P:MonoGameEngine.Camera.Position">
            <summary>
            A property which handles the location of this <see cref="T:MonoGameEngine.Camera"/> object. Respects the boolean state of the <see cref="P:MonoGameEngine.Camera.ClampWithinWorld"/> property.
            </summary>
        </member>
        <member name="P:MonoGameEngine.Camera.Origin">
            <summary>
            A property which handles the rendering origin of this Camera object. Defaults to the center of the screen.
            </summary>
        </member>
        <member name="P:MonoGameEngine.Camera.Offset">
            <summary>
            A property which represents an additional offset to the standard Position. Useful in conjunction with the LookAt() method.
            </summary>
        </member>
        <member name="P:MonoGameEngine.Camera.Zoom">
            <summary>
            A property which handles the zoom level of this Camera object. Clamped between 0.25f and 2.5f.
            </summary>
        </member>
        <member name="P:MonoGameEngine.Camera.Rotation">
            <summary>
            A property that handles the rotation of this Camera object in degrees. Wraps the value between 0 and 360.
            </summary>
        </member>
        <member name="P:MonoGameEngine.Camera.Easing">
            <summary>
            Property which applies easing to any movement applied to this Camera object when its value is not set to 0. Value must be a positive number.
            </summary>
        </member>
        <member name="P:MonoGameEngine.Camera.HorizontalLock">
            <summary>
            Property which enables/disables horizontal movement for this Camera object.
            </summary>
        </member>
        <member name="P:MonoGameEngine.Camera.VerticalLock">
            <summary>
            Property which enables/disables vertical movement for this Camera object.
            </summary>
        </member>
        <member name="P:MonoGameEngine.Camera.Limits">
            <summary>
            Property which represents the limits within which this Camera object may move when ClampWithinWorld is set to true. Set to the screen bounds by default.
            </summary>
        </member>
        <member name="P:MonoGameEngine.Camera.ClampWithinWorld">
            <summary>
            Property which controls whether or not this <see cref="T:MonoGameEngine.Camera"/> object can leave the rectangle represented by the <see cref="P:MonoGameEngine.Camera.Limits"/> property.
            </summary>
        </member>
        <member name="P:MonoGameEngine.Camera.ViewBounds">
            <summary>
            Property which represents the rectangle bounds that the camera can currently see.
            </summary>
        </member>
        <member name="M:MonoGameEngine.Camera.WorldToScreen(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts the given <see cref="T:Microsoft.Xna.Framework.Vector2"/> position from world space to screen space.
            </summary>
            <param name="worldPosition">The co-ordinates in world-space that should be converted to screen-space.</param>
            <returns>A Vector2 object representing the worldPosition parameter converted into screen-space co-ordinates.</returns>
        </member>
        <member name="M:MonoGameEngine.Camera.ScreenToWorld(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts the given <see cref="T:Microsoft.Xna.Framework.Vector2"/> position from screen space to world space.
            </summary>
            <param name="screenPosition">The co-ordinates in screen-space that should be converted to world-space.</param>
            <returns>A Vector2 object representing the screenPosition parameter converted into world-space co-ordinates.</returns>
        </member>
        <member name="M:MonoGameEngine.Camera.GetViewMatrix">
            <summary>
            A getter function which returns the view matrix used to render the screen from this <see cref="T:MonoGameEngine.Camera"/> object's perspective.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Matrix"/> object representing the view of this <see cref="T:MonoGameEngine.Camera"/>.</returns>
        </member>
        <member name="M:MonoGameEngine.Camera.LookAt(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Sets this <see cref="T:MonoGameEngine.Camera"/> object's position to the given <see cref="T:Microsoft.Xna.Framework.Vector2"/> position.
            </summary>
            <param name="position">The position that this <see cref="T:MonoGameEngine.Camera"/> should follow. <strong>Note: </strong>This is different to the <see cref="P:MonoGameEngine.Camera.Offset"/> of the <see cref="T:MonoGameEngine.Camera"/>, which can be set separately.</param>
        </member>
        <member name="M:MonoGameEngine.Camera.Move(Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>
            Moves this <see cref="T:MonoGameEngine.Camera"/> object by the given displacement.
            </summary>
            <param name="displacement">The amount which the <see cref="T:MonoGameEngine.Camera"/> should move this frame.</param>
            <param name="respectRotation">Determines whether or not rotation is taken into account in this movement calculation.</param>
        </member>
        <member name="M:MonoGameEngine.Camera.Move(System.Single,System.Single,System.Boolean)">
            <summary>
            [Overload] Moves this <see cref="T:MonoGameEngine.Camera"/> object by the given displacement.
            </summary>
            <param name="x">The amount which the <see cref="T:MonoGameEngine.Camera"/> should move in the x-axis this frame.</param>
            <param name="y">The amount which the <see cref="T:MonoGameEngine.Camera"/> should move in the y-axis this frame.</param>
            <param name="respectRotation">Determines whether or not rotation is taken into account in this movement calculation.</param>
        </member>
        <member name="M:MonoGameEngine.Camera.Shake(System.Single,System.Single)">
            <summary>
            Performs a camera shake.
            </summary>
            <param name="strength">The desired strength of the shake. Values are clamped between 0 and 50.</param>
            <param name="duration">Determines how long the shake lasts for. Value should be greater than 0.</param>
        </member>
        <member name="T:MonoGameEngine.IScreen">
            <summary>The basic interface all Screen objects must adhere to.</summary>
        </member>
        <member name="M:MonoGameEngine.IScreen.Start(MonoGameEngine.Core)">
            <summary>
            Method used to automatically setup the screen before it begins.
            </summary>
        </member>
        <member name="M:MonoGameEngine.IScreen.End">
            <summary>
            Method used to clear any created instances held by this Screen. Automatically called before a new Screen is started.
            </summary>
        </member>
        <member name="M:MonoGameEngine.IScreen.Update(System.Single)">
            <summary>
            Method used to send out update requests to all registered GameObjects belonging to this Screen. Called (roughly) 60 frames per second.
            </summary>
            <param name="deltaTime">The amount of time that has passed since the last frame, in seconds. Taken from MonoGame's GameTime object.</param>
        </member>
        <member name="M:MonoGameEngine.IScreen.Render(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Method used to render any registered GameObjects.
            </summary>
            <param name="spriteBatch">The SpriteBatch of the current GameCore.</param>
        </member>
        <member name="M:MonoGameEngine.IScreen.PreRender(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Method used for any pre-render setup.
            </summary>
            <param name="spriteBatch">The SpriteBatch of the current GameCore.</param>
        </member>
        <member name="M:MonoGameEngine.IScreen.PostRender(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Method used for post-render clean-up on this IScreen.
            </summary>
            <param name="spriteBatch">The SpriteBatch of the current GameCore.</param>
        </member>
        <member name="T:MonoGameEngine.MouseButton">
            <summary>Enum representing the three main mouse buttons. Used when handling mouse click inputs.
            <br/>- <strong>Left</strong> represents a left mouse button click.
            <br/>- <strong>Right</strong> represents a right mouse button click.
            <br/>- <strong>Middle</strong> represents a middle mouse button click.
            </summary>
        </member>
        <member name="F:MonoGameEngine.MouseButton.Left">
            <summary>Represents a left mouse button click.</summary>
        </member>
        <member name="F:MonoGameEngine.MouseButton.Right">
            <summary>Represents a right mouse button click.</summary>
        </member>
        <member name="F:MonoGameEngine.MouseButton.Middle">
            <summary>Represents a middle mouse button click.</summary>
        </member>
        <member name="T:MonoGameEngine.GameInput">
            <summary>A class which gives access to low-level input capturing for keyboard, mouse and gamepads.</summary>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsKeyHeld(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Check to see if key has been held for more than one frame.
            </summary>
            <param name="key">The key to check.</param>
            <returns>Returns 'true' if the chosen key has been pressed for at least this frame and the last. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsKeyHeld(System.String)">
            <summary>
            [Overload] Check to see if key has been held for more than one frame.
            </summary>
            <param name="key">A string representing the name of the key to check.</param>
            <returns>Returns 'true' if the chosen key has been pressed for at least this frame and the last. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsKeyPressed(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Check to see if this is the first frame the key has been pressed down.
            </summary>
            <param name="key">The key to check.</param>
            <returns>Returns 'true' if the chosen key was first pressed this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsKeyPressed(System.String)">
            <summary>
            [Overload] Check to see if this is the first frame the key has been pressed down.
            </summary>
            <param name="key">A string representing the name of the key to check.</param>
            <returns>Returns 'true' if the chosen key was first pressed this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsKeyReleased(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Check to see if the key was released this frame.
            </summary>
            <param name="key">The key to check.</param>
            <returns>Returns 'true' if the chosen key was first released on this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsKeyReleased(System.String)">
            <summary>
            [Overload] Check to see if the key was released this frame.
            </summary>
            <param name="key">A string representing the name of the key to check.</param>
            <returns>Returns 'true' if the chosen key was first released on this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.SetGamePadVibration(System.Single,System.Single,System.Int32)">
            <summary>
            Set the vibration strength of the chosen player's gamepad. 
            </summary>
            <param name="vibrationStrength">The strength with which to vibrate the gamepad. Should be between 0.0f and 1.0f.</param>
            <param name="duration">[Optional] The amount of time, in seconds, that the vibration should last for. '0.1f' by default.</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 8. '1' by default.</param>
        </member>
        <member name="M:MonoGameEngine.GameInput.SetGamePadVibration(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            [Overload] Set the vibration strength of the chosen player's gamepad. 
            </summary>
            <param name="leftVibration">The strength with which to vibrate the gamepad's left motor. Should be between 0.0f and 1.0f.</param>
            <param name="rightVibration">The strength with which to vibrate the gamepad's right motor. Should be between 0.0f and 1.0f.</param>
            <param name="duration">[Optional] The amount of time, in seconds, that the vibration should last for. '0.1f' by default.</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 8. '1' by default.</param>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsGamePadButtonPressed(Microsoft.Xna.Framework.Input.Buttons,System.Int32)">
            <summary>
            Check to see if this is the first frame the button on the specified gamepad has been pressed down.
            </summary>
            <param name="button">The specified button to check for.</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 8. '1' by default.</param>
            <returns>Returns 'true' if the chosen button was first pressed this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsGamePadButtonPressed(System.String,System.Int32)">
            <summary>
            [Overload] Check to see if this is the first frame the button on the specified gamepad has been pressed down.
            </summary>
            <param name="button">A string representing the name of the button to check for.</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 8. '1' by default.</param>
            <returns>Returns 'true' if the chosen button was first pressed this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsGamePadButtonHeld(Microsoft.Xna.Framework.Input.Buttons,System.Int32)">
            <summary>
            Check to see if button on the specified gamepad has been held for more than one frame.
            </summary>
            <param name="button">The specified button to check for.</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 8. '1' by default.</param>
            <returns>Returns 'true' if the chosen button has been pressed for at least this frame and the last. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsGamePadButtonHeld(System.String,System.Int32)">
            <summary>
            [Overload] Check to see if button on the specified gamepad has been held for more than one frame.
            </summary>
            <param name="button">A string representing the name of the button to check for.</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 8. '1' by default.</param>
            <returns>Returns 'true' if the chosen button has been pressed for at least this frame and the last. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsGamePadButtonReleased(Microsoft.Xna.Framework.Input.Buttons,System.Int32)">
            <summary>
            Check to see if the button on the specified gamepad was released this frame.
            </summary>
            <param name="button">The specified button to check for.</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 8. '1' by default.</param>
            <returns>Returns 'true' if the chosen button was first released on this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsGamePadButtonReleased(System.String,System.Int32)">
            <summary>
            [Overload] Check to see if the button on the specified gamepad was released this frame.
            </summary>
            <param name="button">A string representing the name of the button to check for.</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 8. '1' by default.</param>
            <returns>Returns 'true' if the chosen button was first released on this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.GetGamePadStickDirection(System.String,System.Int32)">
            <summary>
            Checks the direction of the specified stick on the requested gamepad.
            </summary>
            <param name="stick">A string representing the name of the stick to check for. Should be either "Left" or "Right".</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 8. '1' by default.</param>
            <returns>Returns the normalised direction vector of the specified stick. Otherwise, returns (0,0) if stick is untouched or not found.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.GetGamePadStickAngle(System.String,System.Int32)">
            <summary>
            Checks the angle of the specified stick on the requested gamepad.
            </summary>
            <param name="stick">A string representing the name of the stick to check for. Should be either "Left" or "Right".</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 8. '1' by default.</param>
            <returns>Returns a floating-point number representing the angle (in degrees) of the specified thumbstick.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.GetGamePadTriggerPress(System.String,System.Int32)">
            <summary>
            Checks how far the specified trigger has been pressed. '1.0f' would be a full press.
            </summary>
            <param name="trigger">A string representing the name of the trigger to check for. Should be either "Left" or "Right".</param>
            <param name="player">[Optional] The index of the desired gamepad. Should be between 1 and 8. '1' by default.</param>
            <returns>Returns a floating-point value representing the strength of the press on the requested trigger.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsMouseButtonHeld(MonoGameEngine.MouseButton)">
            <summary>
            Check to see if mouse button has been held for more than one frame.
            </summary>
            <param name="button">An enum representing the mouse button to check.</param>
            <returns>Returns 'true' if the chosen mouse button has been pressed for at least this frame and the last. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsMouseButtonHeld(System.String)">
            <summary>
            Check to see if mouse button has been held for more than one frame.
            </summary>
            <param name="button">A string representing the name of the button to check for.</param>
            <returns>Returns 'true' if the chosen mouse button has been pressed for at least this frame and the last. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsMouseButtonPressed(MonoGameEngine.MouseButton)">
            <summary>
            Check to see if this is the first frame the mouse button has been pressed down.
            </summary>
            <param name="button">An enum representing the mouse button to check.</param>
            <returns>Returns 'true' if the chosen mouse button was first pressed this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsMouseButtonPressed(System.String)">
            <summary>
            [Overload] Check to see if this is the first frame the mouse button has been pressed down.
            </summary>
            <param name="button">A string representing the name of the button to check for.</param>
            <returns>Returns 'true' if the chosen mouse button was first pressed this current frame. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsMouseButtonReleased(MonoGameEngine.MouseButton)">
            <summary>
            Check to see if the mouse button was released this frame.
            </summary>
            <param name="button">An enum representing the mouse button to check.</param>
            <returns>Returns 'true' if the chosen mouse button was released this frame, otherwise returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsMouseButtonReleased(System.String)">
            <summary>
            [Overload] Check to see if the mouse button was released this frame.
            </summary>
            <param name="button">A string representing the name of the button to check for.</param>
            <returns>Returns 'true' if the chosen mouse button was released this frame, otherwise returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.GetMousePosition">
            <summary>
            Get the position co-ordinates of the mouse cursor, relative to the primary window.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2"/> object containing the co-ordinates of the mouse cursor.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.GetMouseScrollDelta">
            <summary>
            Get the difference in mouse scroll wheel position between the current frame and the last.
            </summary>
            <returns>A floating-point value containing the mouse scroll delta value.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.SetMousePosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Set the mouse cursor position, relative to the active window. (0,0) is the top-left corner.
            </summary>
            <param name="mousePosition">The co-ordinates to set the mouse cursor to.</param>
        </member>
        <member name="M:MonoGameEngine.GameInput.GetConnectedGamePadCount">
            <summary>
            Get the number of active, connected gamepads.
            </summary>
            <returns>An integer value representing the number of active gamepads.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.IsMouseOnScreen">
            <summary>
            Check to see if the mouse cursor is still currently on the displayed <see cref="T:MonoGameEngine.Screen"/>.
            </summary>
            <returns>Returns 'true' if the mouse cursor is within the bounds of the current <see cref="T:MonoGameEngine.Screen"/>. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.Update(System.Single)">
            <summary>
             Method used to refresh the keyboard states used when handling key presses. <b>Automatically handled by the game's <see cref="T:MonoGameEngine.Core"/></b>.
            </summary>
        </member>
        <member name="M:MonoGameEngine.GameInput.CalculateThumbstickAngle(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts the GamePadThumbStick raw data into a usable angle in degrees.
            </summary>
            <param name="direction">The thumbstick direction to convert.</param>
            <returns>Returns a floating-point value representing the angle of the given vector, in degrees.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.CalculateThumbstickDirection(System.Single)">
            <summary>
            Converts an angle in degrees into a unit vector direction.
            </summary>
            <param name="degrees">The angle, in degrees, of the vector.</param>
            <returns>Returns a Vector2 object representing the unit vector direction of the given angle.</returns>
        </member>
        <member name="M:MonoGameEngine.GameInput.InitialiseGamePads">
            <summary>
            Initialise support for input from <see cref="T:Microsoft.Xna.Framework.Input.GamePad"/>s. Called automatically by the game's <see cref="T:MonoGameEngine.Core"/>.
            </summary>
        </member>
        <member name="M:MonoGameEngine.GameInput.UpdateGamePads(System.Single)">
            <summary>
            Update each <see cref="T:Microsoft.Xna.Framework.Input.GamePad"/> in turn.
            </summary>
        </member>
        <member name="T:MonoGameEngine.Maths.InterpolationType">
            <summary>Enum used to trigger different methods of interpolation.
            <br/>- <strong><see cref="F:MonoGameEngine.Maths.InterpolationType.Lerp"/></strong> uses the standard linear interpolation formula. Has no easing applied.
            <br/>- <strong><see cref="F:MonoGameEngine.Maths.InterpolationType.SmoothLerp"/></strong> uses the standard linear interpolation formula, with easing applied.
            <br/>- <strong><see cref="F:MonoGameEngine.Maths.InterpolationType.Slerp"/></strong> uses a spherical interpolation formula, which creates a different kind of easing effect to SmoothLerp.
            </summary>
        </member>
        <member name="F:MonoGameEngine.Maths.InterpolationType.Lerp">
            <summary>Uses the standard linear interpolation formula. Has no easing applied.</summary>
        </member>
        <member name="F:MonoGameEngine.Maths.InterpolationType.SmoothLerp">
            <summary>Uses the standard linear interpolation formula, with easing applied.</summary>
        </member>
        <member name="F:MonoGameEngine.Maths.InterpolationType.Slerp">
            <summary>Uses a spherical interpolation formula, which creates a different kind of easing effect to SmoothLerp.</summary>
        </member>
        <member name="T:MonoGameEngine.Maths.Interpolation">
            <summary>A static helper class which can be used to call upon several useful interpolation methods.</summary>
        </member>
        <member name="M:MonoGameEngine.Maths.Interpolation.SmoothLerp(System.Single,System.Single,System.Single)">
            <summary>
            Linear interpolation with smoothing applied.
            </summary>
            <param name="point1">The start of the range.</param>
            <param name="point2">The end of the range.</param>
            <param name="time">The time along the interpolation curve.</param>
            <returns>The floating-point value between point1 and point2, at the given time.</returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Interpolation.SmoothLerp(System.Int32,System.Int32,System.Single)">
            <summary>
            [Overload] Standard linear interpolation with smoothing applied.
            </summary>
            <param name="point1">The start of the range.</param>
            <param name="point2">The end of the range.</param>
            <param name="time">The time along the interpolation curve.</param>
            <returns>The integer value between point1 and point2, at the given time.</returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Interpolation.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Standard linear interpolation calculator.
            </summary>
            <param name="point1">The start of the range.</param>
            <param name="point2">The end of the range.</param>
            <param name="time">The time along the interpolation curve.</param>
            <returns>The floating-point value between point1 and point2, at the given time.</returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Interpolation.Lerp(System.Int32,System.Int32,System.Single)">
            <summary>
            [Overload] Standard linear interpolation calculator.
            </summary>
            <param name="point1">The start of the range.</param>
            <param name="point2">The end of the range.</param>
            <param name="time">The time along the interpolation curve.</param>
            <returns>The integer value between point1 and point2, at the given time.</returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Interpolation.Slerp(System.Single,System.Single,System.Single)">
            <summary>
            Spherical linear interpolation calculator, with smoothing applied.
            </summary>
            <param name="point1">The start of the range.</param>
            <param name="point2">The end of the range.</param>
            <param name="time">The time along the interpolation curve.</param>
            <returns>The floating-point value between point1 and point2, at the given time.</returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Interpolation.Slerp(System.Int32,System.Int32,System.Single)">
            <summary>
            [Overload] Spherical linear interpolation calculator, with smoothing applied.
            </summary>
            <param name="point1">The start of the range.</param>
            <param name="point2">The end of the range.</param>
            <param name="time">The time along the interpolation curve.</param>
            <returns>The integer value between point1 and point2, at the given time.</returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Interpolation.InverseLerp(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Determines where a given value lies within a range.
            </summary>
            <param name="point1">The start of the range.</param>
            <param name="point2">The end of the range.</param>
            <param name="value">The point within the range you want to calculate.</param>
            <param name="clamp">[Optional] Sets whether or not to clamp the returned value between 0 and 1.</param>
            <returns>The floating-point value representing where the value parameter falls within the given range.<br/>This value can be clamped or extrapolated based on the clamp parameter.</returns>
        </member>
        <member name="T:MonoGameEngine.Maths.InterpolationData">
            <summary>
            Class intended to represent every aspect of Linear Interpolation, in one handy object.<br></br>
            Please ensure the number of StartValues and EndValues are not identical.
            </summary>
        </member>
        <member name="P:MonoGameEngine.Maths.InterpolationData.Type">
            <summary>The type of interpolation that should be performed.</summary>
        </member>
        <member name="P:MonoGameEngine.Maths.InterpolationData.LerpTime">
            <summary>How far along the interpolation timeline this data is, generally between 0.0 and 1.0.</summary>
        </member>
        <member name="P:MonoGameEngine.Maths.InterpolationData.SpeedMultiplier">
            <summary>How quickly the data reaches 1.0f LerpTime.</summary>
        </member>
        <member name="P:MonoGameEngine.Maths.InterpolationData.CurrentValues">
            <summary>A collection of 'current' values, based on the current LerpTime and the StartValues and EndValues provided.</summary>
        </member>
        <member name="P:MonoGameEngine.Maths.InterpolationData.StartValues">
            <summary>A collection of floating-point 'start' values.</summary>
        </member>
        <member name="P:MonoGameEngine.Maths.InterpolationData.EndValues">
            <summary>A collection of floating-point 'end' values.</summary>
        </member>
        <member name="M:MonoGameEngine.Maths.InterpolationData.#ctor(System.Single[],System.Single[],System.Single,MonoGameEngine.Maths.InterpolationType)">
            <summary>
            The main constructor for the class. Uses raw float arrays of values that can handle any number of entries.
            </summary>
            <param name="startValues">A generic array of float values.</param>
            <param name="endValues">A generic array of float values.</param>
            <param name="speed">A float value which defaults to 1.0f (the interpolation will take exactly 1 second).</param>
            <param name="type">An enum which dictates the type of interpolation to perform.</param>
        </member>
        <member name="M:MonoGameEngine.Maths.InterpolationData.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,MonoGameEngine.Maths.InterpolationType)">
            <summary>
            The overloaded constructor for the class. Accepts the MonoGame-specific Vector2 class objects. Useful for moving 2d objects.
            </summary>
            <param name="startValue">A Vector2 object starting values.</param>
            <param name="endValue">A Vector2 object ending values.</param>
            <param name="speed">A float value which defaults to 1.0f (the interpolation will take exactly 1 second).</param>
            <param name="type">An enum which dictates the type of interpolation to perform.</param>
        </member>
        <member name="M:MonoGameEngine.Maths.InterpolationData.UpdateValues(System.Single)">
            <summary>
            Performs the interpolation between the start and end positions given. Also updates the current lerp time using the deltaTime parameter.
            </summary>
            <param name="deltaTime">A generic float value is used, to decouple from the Monogame framework's GameTime construct.</param>
        </member>
        <member name="T:MonoGameEngine.Maths.Noise">
            <summary>Noise is unfinished and currently does not work due to the ComputePerlinNoise method.</summary>
        </member>
        <member name="M:MonoGameEngine.Maths.Noise.GenerateNoiseMap(System.Int32,System.Int32,System.Int32,System.Single,System.Int32,System.Single,System.Single,Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>
            
            </summary>
            <param name="mapWidth"></param>
            <param name="mapHeight"></param>
            <param name="seed"></param>
            <param name="scale"></param>
            <param name="octaves"></param>
            <param name="persistance"></param>
            <param name="lacunarity"></param>
            <param name="offset"></param>
            <param name="seamless"></param>
            <returns></returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Noise.GenerateNoiseMap(System.Int32,System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            [Overload] 
            </summary>
            <param name="mapWidth"></param>
            <param name="mapHeight"></param>
            <param name="seed">[Optional] </param>
            <param name="seamless">[Optional] </param>
            <returns></returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Noise.ComputePerlinNoise(System.Single,System.Single)">
            <summary>
            Based on Ken Perlin's original noise algorithm, converted to C#.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Noise.DotGridGradient(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Computes the dot product of the distance and gradient vectors.
            </summary>
            <param name="ix"></param>
            <param name="iy"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Noise.RandomGradient(System.Int32,System.Int32)">
            <summary>
            Create pseudorandom direction vector
            </summary>
            <param name="ix"></param>
            <param name="iy"></param>
            <returns></returns>
        </member>
        <member name="T:MonoGameEngine.Maths.Wave">
            <summary>A static helper class which can be used to perform some useful Sin and Cos wave functionality.</summary>
        </member>
        <member name="M:MonoGameEngine.Maths.Wave.Sin(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A simple wrapper method for generating a y-axis position value along a sine wave.
            </summary>
            <param name="amplitude">The 'height' of the wave.</param>
            <param name="frequency">The number of 'cycles' per second.</param>
            <param name="time">The current time, in seconds. Specifies the y-position along the wave that we want.</param>
            <param name="offset">The amount to offset the generate y-position by.</param>
            <returns>The y-axis value of the given sine waveform at the requested time.</returns>
        </member>
        <member name="M:MonoGameEngine.Maths.Wave.Cos(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            A simple wrapper method for generating a y-axis position value along a cosine wave.
            </summary>
            <param name="amplitude">The 'height' of the wave.</param>
            <param name="frequency">The number of 'cycles' per second.</param>
            <param name="time">The current time, in seconds. Specifies the y-position along the wave that we want.</param>
            <param name="offset">The amount to offset the generate y-position by.</param>
            <returns>The y-axis value of the given cosine waveform at the requested time.</returns>
        </member>
        <member name="M:MonoGameEngine.ParticleEngine.ParticleEmitter.SetSprite(MonoGameEngine.Sprite,System.Boolean)">
            <summary>
            A setter function for assigning a new Sprite to visually represent this GameObject.
            </summary>
            <param name="sprite">The Sprite instance that should be used by this GameObject.</param>
            <param name="inWorldSpace">[Optional] A boolean representing whether to draw this Sprite in world space or screen space.</param>
        </member>
        <member name="M:MonoGameEngine.ParticleEngine.ParticleEmitter.SetSprite(Microsoft.Xna.Framework.Graphics.Texture2D,System.Boolean)">
            <summary>
            [Overload] A setter function for assigning a new Sprite to visually represent this GameObject.
            </summary>
            <param name="spriteImage">The image file that should be used by this GameObject's new Sprite.</param>
            <param name="inWorldSpace">[Optional] A boolean representing whether to draw this Sprite in world space or screen space.</param>
        </member>
        <member name="M:MonoGameEngine.ParticleEngine.ParticleEmitter.SetSprite(System.String,System.Boolean)">
            <summary>
            [Overload] A setter function for assigning a new Sprite to visually represent this GameObject.
            </summary>
            <param name="spriteName">The name of an image file that should be used by this GameObject's new Sprite.</param>
            <param name="inWorldSpace">[Optional] A boolean representing whether to draw this Sprite in world space or screen space.</param>
        </member>
        <member name="M:MonoGameEngine.ParticleEngine.ParticleEmitter.SetSprite(System.String,System.Int32,System.Int32,System.Single,System.Int32[],MonoGameEngine.LoopType,System.Boolean)">
            <summary>
            [Overload] A setter function for assigning a new AnimatedSprite to visually represent this GameObject.
            </summary>
            <param name="spritesheet">The name of the spritesheet that should be used for rendering.</param>
            <param name="frameWidth">The width of each frame of animation in the spritesheet (in pixels).</param>
            <param name="frameHeight">The height of each frame of animation in the spritesheet (in pixels).</param>
            <param name="animationSpeed">The speed at which the animation should cycle between its frames (in seconds).</param>
            <param name="framesPerAnimation">An array of integers, with each integer representing the frame count of the corresponding animation sequence.</param>
            <param name="loopType">[Optional] The type of animation looping that should be used. 'LoopType.Standard' by default.</param>
            <param name="inWorldSpace">[Optional] A boolean representing whether to draw this Sprite in world space or screen space.</param>
        </member>
        <member name="M:MonoGameEngine.ParticleEngine.ParticleEmitter.SetSprite(System.String,System.Int32,System.Single,System.Int32[],MonoGameEngine.LoopType,System.Boolean)">
            <summary>
            [Overload] A setter function for assigning a new AnimatedSprite to visually represent this GameObject.
            </summary>
            <param name="spritesheet">The name of the spritesheet that should be used for rendering.</param>
            <param name="frameSize">The width and height of each frame of animation in the spritesheet. This requires cells of matching widths and heights.</param>
            <param name="animationSpeed">The speed at which the animation should cycle between its frames (in seconds).</param>
            <param name="framesPerAnimation">An array of integers, with each integer representing the frame count of the corresponding animation sequence.</param>
            <param name="loopType">[Optional] The type of animation looping that should be used. 'LoopType.Standard' by default.</param>
            <param name="inWorldSpace">[Optional] A boolean representing whether to draw this Sprite in world space or screen space.</param>
        </member>
        <member name="M:MonoGameEngine.ParticleEngine.ParticleEmitter.GetSprite">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:MonoGameEngine.LoopType">
            <summary>Represents the style of loop that is desired for an animation.
            <br/>- <strong>Standard</strong> loops the animation from the start to the end, before starting from the beginning again.
            <br/>- <strong>Bounce</strong> bounces the animation loop forwards and backwards when it runs out of frames in its current direction.
            <br/>- <strong>None</strong> will only play the animation once before stopping on the final frame.
            </summary>
        </member>
        <member name="F:MonoGameEngine.LoopType.Standard">
            <summary>Loops the animation from the start to the end, before starting from the beginning again.</summary>
        </member>
        <member name="F:MonoGameEngine.LoopType.Bounce">
            <summary>Bounces the animation loop forwards and backwards when it runs out of frames in its current direction.</summary>
        </member>
        <member name="F:MonoGameEngine.LoopType.None">
            <summary>Will only play the animation once before stopping on the final frame.</summary>
        </member>
        <member name="T:MonoGameEngine.AnimatedSprite">
            <summary>A class that can handle sprite animation using a uniform spritesheet.</summary>
        </member>
        <member name="M:MonoGameEngine.AnimatedSprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Color},System.Int32)">
            <summary>
            The constructor for this class.
            </summary>
            <param name="texture">The spritesheet that this <see cref="T:MonoGameEngine.AnimatedSprite"/> should use.</param>
            <param name="colour">[Optional] The colour that should be used when rendering the frames of this <see cref="T:MonoGameEngine.AnimatedSprite"/>. White by default.</param>
            <param name="layerDepth">[Optional] The rendering depth of this <see cref="T:MonoGameEngine.AnimatedSprite"/>. '5' by default.</param>
        </member>
        <member name="M:MonoGameEngine.AnimatedSprite.Initialise(System.Int32,System.Int32,System.Single,System.Int32[],MonoGameEngine.LoopType)">
            <summary>
            Function that should be called when setting up this <see cref="T:MonoGameEngine.AnimatedSprite"/>'s attributes. Must be called before any animation can take place.
            </summary>
            <param name="frameWidth">The width of each frame of animation in the spritesheet (in pixels).</param>
            <param name="frameHeight">The height of each frame of animation in the spritesheet (in pixels).</param>
            <param name="animationSpeed">The speed at which the animation should cycle between its frames (in seconds).</param>
            <param name="framesPerAnimation">An array of integers, with each integer representing the frame count of the corresponding animation sequence.</param>
            <param name="loopType">[Optional] The type of animation looping that should be used. 'LoopType.Standard' by default.</param>
        </member>
        <member name="M:MonoGameEngine.AnimatedSprite.StartAnimation(System.Int32,System.Nullable{System.Single},MonoGameEngine.LoopType)">
            <summary>
            Function used to begin a new animation. 
            </summary>
            <param name="animation">The number of the animation in the spritesheet. The first row is at index '0'.</param>
            <param name="animationSpeed">[Optional] The speed at which the animation should cycle between its frames (in seconds).</param>
            <param name="loopType">[Optional] The type of animation looping that should be used. '<see cref="F:MonoGameEngine.LoopType.Standard"/>' by default.</param>
        </member>
        <member name="M:MonoGameEngine.AnimatedSprite.StartAnimation(System.Enum,System.Nullable{System.Single},MonoGameEngine.LoopType)">
            <summary>
            [Overload] Function used to begin a new animation. 
            </summary>
            <param name="animationEnum">The user-defined <see cref="T:System.Enum"/> which represents the desired animation row in the spritesheet. <br/>Enums should be written starting from '0', as per their default behaviour.</param>
            <param name="animationSpeed">[Optional] The speed at which the animation should cycle between its frames (in seconds).</param>
            <param name="loopType">[Optional] The type of animation looping that should be used. '<see cref="F:MonoGameEngine.LoopType.Standard"/>' by default.</param>
        </member>
        <member name="M:MonoGameEngine.AnimatedSprite.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>
            The rendering function of this <see cref="T:MonoGameEngine.AnimatedSprite"/> object.
            </summary>
            <param name="spriteBatch">The common <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> responsible for handling the sprites within the current game.</param>
            <param name="position">The position onscreen to draw this <see cref="T:MonoGameEngine.Sprite"/> at.</param>
        </member>
        <member name="M:MonoGameEngine.AnimatedSprite.Animate(System.Single)">
            <summary>
            The function responsible for updating the current frame of animation for this <see cref="T:MonoGameEngine.AnimatedSprite"/> object. <b>Called automatically from the game's <see cref="T:MonoGameEngine.Screen"/></b>.
            </summary>
            <param name="deltaTime">The elapsed time since the last frame.</param>
        </member>
        <member name="M:MonoGameEngine.AnimatedSprite.GetWidth">
            <summary>
            [Override] A getter function which returns the width of this <see cref="T:MonoGameEngine.AnimatedSprite"/>'s image.
            </summary>
            <returns>Returns an integer value representing the width of the current frame of animation.</returns>
        </member>
        <member name="M:MonoGameEngine.AnimatedSprite.GetHeight">
            <summary>
            [Override] A getter function which returns the height of this <see cref="T:MonoGameEngine.AnimatedSprite"/>'s image.
            </summary>
            <returns>Returns an integer value representing the height of the current frame of animation.</returns>
        </member>
        <member name="M:MonoGameEngine.AnimatedSprite.IsPaused">
            <summary>
            A getter function which returns the current 'paused' state of this <see cref="T:MonoGameEngine.AnimatedSprite"/>'s animation.
            </summary>
            <returns>Returns a boolean value representing whether or not this <see cref="T:MonoGameEngine.AnimatedSprite"/> is currently animating or not.</returns>
        </member>
        <member name="M:MonoGameEngine.AnimatedSprite.SetPaused(System.Boolean)">
            <summary>
            A setter function which can either pause or resume this <see cref="T:MonoGameEngine.AnimatedSprite"/>'s animation updates.
            </summary>
            <param name="paused">A boolean value representing whether or not this <see cref="T:MonoGameEngine.AnimatedSprite"/> should be paused.</param>
        </member>
        <member name="M:MonoGameEngine.AnimatedSprite.SetFrameNumber(System.Int32)">
            <summary>
            A setter function which can manually assign the current frame of animation in the current sequence.
            </summary>
            <param name="newFrame">An integer value representing the frame of animation to switch to.</param>
        </member>
        <member name="M:MonoGameEngine.AnimatedSprite.SetAnimationSpeed(System.Single)">
            <summary>
            A setter function which can assign a new animation speed multiplier to this <see cref="T:MonoGameEngine.AnimatedSprite"/>'s current animation.
            </summary>
            <param name="animationSpeed">A floating-point value representing the new animation speed multiplier to be used.</param>
        </member>
        <member name="M:MonoGameEngine.AnimatedSprite.GetAnimationFrame">
            <summary>
            A getter function which returns the rectangle used to draw from the currently loaded spritesheet.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Rectangle"/> object representing the spritesheet cell of the current frame of animation.</returns>
        </member>
        <member name="M:MonoGameEngine.AnimatedSprite.GetAnimationFrameByIndex(System.Int32,System.Int32)">
            <summary>
            A getter function which returns a new <see cref="T:Microsoft.Xna.Framework.Rectangle"/> representing a specific frame within the <see cref="T:MonoGameEngine.AnimatedSprite"/>'s spritesheet.
            </summary>
            <param name="frameIndex">An integer value representing the index within in the animation frames (the column of the spritesheet).</param>
            <param name="animationIndex">An integer value representing the index within in the available animations (the row of the spritesheet).</param>
            <returns>Returns a <see cref="T:Microsoft.Xna.Framework.Rectangle"/> object representing the requested spritesheet cell using the specified row and column.</returns>
        </member>
        <member name="M:MonoGameEngine.AnimatedSprite.GetFrameNumber">
            <summary>
            A getter function which returns the frame index of the current frame of animation within the sequence.
            </summary>
            <returns>An integer value representing the index of the animation frame within the current sequence.</returns>
        </member>
        <member name="M:MonoGameEngine.AnimatedSprite.GetAnimationIndex">
            <summary>
            A getter function which returns the index of the current animation within the established array of animations.
            </summary>
            <returns>An integer value representing the row of current animation frames in this <see cref="T:MonoGameEngine.AnimatedSprite"/>'s spritesheet.</returns>
        </member>
        <member name="M:MonoGameEngine.AnimatedSprite.GetAnimationSpeed">
            <summary>
            A getter function which returns the speed multiplier used when playing this animation.
            </summary>
            <returns>A floating-point value representing the speed multiplier used when animating this <see cref="T:MonoGameEngine.AnimatedSprite"/>.</returns>
        </member>
        <member name="M:MonoGameEngine.AnimatedSprite.GetLengthOfCurrentAnimation">
            <summary>
            A getter function which returns the total number of frames of animation in the currently playing animation sequence.
            </summary>
            <returns>An integer value representing the number of animation cells in the currently playing animation.</returns>
        </member>
        <member name="M:MonoGameEngine.AnimatedSprite.IsFinished">
            <summary>
            A getter function which returns the state of this <see cref="T:MonoGameEngine.AnimatedSprite"/>. Returns 'true' if the animation is not set to loop AND the last frame of animation is being displayed.
            </summary>
            <returns>A boolean value representing whether or not the current animation has finished.</returns>
        </member>
        <member name="T:MonoGameEngine.BackgroundType">
            <summary>Enum used to control <see cref="T:MonoGameEngine.Background"/> rendering behaviour.
            <br/>- <strong>Standard</strong> will apply no resizing or scaling to the held image.
            <br/>- <strong>Stretch</strong> will fill the current window with the held image.
            <br/>- <strong>Wrap</strong> will tile the background image across the current window without stretching. Does not allow scrolling.
            <br/>- <strong>HorizontalScroll</strong> tiles the background image across the current window, but only allows scrolling horizontally.
            <br/>- <strong>VerticalScroll</strong> tiles the background image across the current window, but only allows scrolling vertically.
            <br/>- <strong>FullScroll</strong> tiles the background image across the current window, and allows scrolling in all directions.
            </summary>
        </member>
        <member name="F:MonoGameEngine.BackgroundType.Standard">
            <summary>No resizing is applied to the held image.</summary>
        </member>
        <member name="F:MonoGameEngine.BackgroundType.Stretch">
            <summary>Fills the current window with the held image.</summary>
        </member>
        <member name="F:MonoGameEngine.BackgroundType.Wrap">
            <summary>Tiles the background image across the current window without stretching. Does not allow scrolling.</summary>
        </member>
        <member name="F:MonoGameEngine.BackgroundType.HorizontalScroll">
            <summary>Tiles the background image across the current window, but only allows scrolling horizontally.</summary>
        </member>
        <member name="F:MonoGameEngine.BackgroundType.VerticalScroll">
            <summary>Tiles the background image across the current window, but only allows scrolling vertically.</summary>
        </member>
        <member name="F:MonoGameEngine.BackgroundType.FullScroll">
            <summary>Tiles the background image across the current window, and allows scrolling in all directions.</summary>
        </member>
        <member name="T:MonoGameEngine.Background">
            <summary>A class which represents the background visual element of a given <see cref="T:MonoGameEngine.Screen"/>.</summary>
        </member>
        <member name="M:MonoGameEngine.Background.#ctor(MonoGameEngine.Core)">
            <summary>
            The constructor of this <see cref="T:MonoGameEngine.Background"/> class.
            </summary>
            <param name="core">The <see cref="T:MonoGameEngine.Core"/> instance at the center of this game project.</param>
        </member>
        <member name="M:MonoGameEngine.Background.Initialise(System.String,System.Single,MonoGameEngine.BackgroundType)">
            <summary>
            A method used for the initial setup of this <see cref="T:MonoGameEngine.Background"/> object. 
            </summary>
            <param name="backgroundName"></param>
            <param name="layerDepth"></param>
            <param name="type"></param>
        </member>
        <member name="M:MonoGameEngine.Background.Update(System.Single)">
            <summary>
            A method which allows this object to remain up-to-date.
            </summary>
            <param name="deltaTime">The time (in seconds) since the last frame of the game.</param>
        </member>
        <member name="M:MonoGameEngine.Background.Render(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            A method which allows this <see cref="T:MonoGameEngine.Background"/> object to be drawn to the game window.
            </summary>
            <param name="spriteBatch">The current batch of sprites to be rendered this frame of the game.</param>
        </member>
        <member name="M:MonoGameEngine.Background.SetRotation(System.Single)">
            <summary>
            A setter method for changing the rotation of the Background's viewport, in degrees. 
            </summary>
            <param name="degrees">A floating-point value representing the z-axis rotation of this Background object, in degrees.</param>
        </member>
        <member name="M:MonoGameEngine.Background.GetRotation">
            <summary>
            A getter method for accessing the rotation of this Background's viewport, in degrees.
            </summary>
            <returns>A floating-point value representing the current rotation of this Background, in degrees.</returns>
        </member>
        <member name="M:MonoGameEngine.Background.GetPosition">
            <summary>
            A getter method for accessing the position of this Background's viewport.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2"/> object representing the co-ordinates of this Background's on-screen position.</returns>
        </member>
        <member name="M:MonoGameEngine.Background.SetPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            A setter method for changing the position of this Background's viewport. <br></br>Can only change the position of Backgrounds which have scrolling enabled.
            </summary>
            <param name="position">The on-screen position that this Background should move to.</param>
        </member>
        <member name="M:MonoGameEngine.Background.SetPosition(System.Single,System.Single)">
            <summary>
            [Overload] A setter method for changing the position of this Background's viewport. <br></br>Can only change the position of Backgrounds which have scrolling enabled.
            </summary>
            <param name="x">The on-screen horizontal co-ordinate that this Background should move to.</param>
            <param name="y">The on-screen vertical co-ordinate that this Background should move to.</param>
        </member>
        <member name="M:MonoGameEngine.Background.Move(Microsoft.Xna.Framework.Vector2)">
            <summary>
            A method which allows the user to move this <see cref="T:MonoGameEngine.Background"/> object by a given amount. <br></br>Can only change the position of Backgrounds which have scrolling enabled.
            </summary>
            <param name="moveBy">A <see cref="T:Microsoft.Xna.Framework.Vector2"/> object containing the number of pixels to move this <see cref="T:MonoGameEngine.Background"/> object by, in the x and y axis respectively.</param>
        </member>
        <member name="T:MonoGameEngine.DrawableElement">
            <summary>A class which represents any and all drawable elements in a game project.</summary>
        </member>
        <member name="M:MonoGameEngine.DrawableElement.#ctor">
            <summary>The base constructor of this class.</summary>
        </member>
        <member name="T:MonoGameEngine.GameObject">
            <summary>A class which can be used as the base of any object needed within a game project.</summary>
        </member>
        <member name="F:MonoGameEngine.GameObject._currentScreen">
            <summary>A reference to the current <see cref="T:MonoGameEngine.Screen"/>, allowing access to some higher-level functionality.</summary>
        </member>
        <member name="P:MonoGameEngine.GameObject.IsKinematic">
            <summary>A boolean property which allows velocity to automatically be added to the <see cref="T:MonoGameEngine.GameObject"/>'s position when set to 'true'.<br/> Value set to 'true' by default.</summary>
        </member>
        <member name="M:MonoGameEngine.GameObject.#ctor">
            <summary>
            Default constructor for this class.
            </summary>
        </member>
        <member name="M:MonoGameEngine.GameObject.OnceAdded">
            <summary>
            Method which is automatically called once, immediately after the <see cref="T:MonoGameEngine.GameObject"/> has been first added to the <see cref="T:MonoGameEngine.Screen"/>.
            </summary>
        </member>
        <member name="M:MonoGameEngine.GameObject.Update(System.Single)">
            <summary>
            Must be overloaded by child classes. Allows code to be run every frame of the game. <b>Called automatically by the current <see cref="T:MonoGameEngine.Screen"/></b>.
            </summary>
            <param name="deltaTime">The elapsed time since the last frame.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.Render(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Performs the drawing of this <see cref="T:MonoGameEngine.GameObject"/>. Can be overloaded by child classes as needed. <b>Called automatically by the current <see cref="T:MonoGameEngine.Screen"/>.</b>.
            </summary>
            <param name="spriteBatch">The common <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> responsible for handling the sprites within the current game.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.Raycast(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            This method sends out a <see cref="T:MonoGameEngine.RayCast"/> in the given direction, and will check against all <see cref="T:MonoGameEngine.GameObject"/>s in the current <see cref="T:MonoGameEngine.Screen"/>.
            </summary>
            <param name="startPoint">The initial point of the raycast.</param>
            <param name="direction">The direction for the raycast to follow. Should be normalised (values between -1 and 1).</param>
            <param name="length">How far the ray should cast, in screen pixels.</param>
            <returns>Returns an array of objects hit by the projected raycast.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.ReceiveRaycast(MonoGameEngine.RayCast,MonoGameEngine.GameObject)">
            <summary>
            Virtual method that should be overloaded when looking for the <see cref="T:MonoGameEngine.GameObject"/> to react to a received <see cref="T:MonoGameEngine.RayCast"/>. <b>Called automatically by the game</b>.
            </summary>
            <param name="rayCast">The <see cref="T:MonoGameEngine.RayCast"/> object that has been received.</param>
            <param name="sender">The <see cref="T:MonoGameEngine.GameObject"/> which has sent out this RayCast.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.GetAllIntersectingObjects``1">
            <summary>
            Performs an immediate check for an intersection between this <see cref="T:MonoGameEngine.GameObject"/> and other <see cref="T:MonoGameEngine.GameObject"/>s of the requested TClass type.
            </summary>
            <typeparam name="TClass">The subclass of <see cref="T:MonoGameEngine.GameObject"/> that should be checked against.</typeparam>
            <returns>Returns an array of other <see cref="T:MonoGameEngine.GameObject"/>s if collisions are detected. Otherwise returns an empty array. <br/>Check the .Length property to see if any elements actually exist.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.GetOneIntersectingObject``1">
            <summary>
            Performs an immediate check for an intersection between the given <see cref="T:MonoGameEngine.GameObject"/> and another <see cref="T:MonoGameEngine.GameObject"/> of the requested TClass type.
            </summary>
            <typeparam name="TClass">The subclass of <see cref="T:MonoGameEngine.GameObject"/> that should be checked against.</typeparam>
            <returns>Returns the other <see cref="T:MonoGameEngine.GameObject"/> if a collision is found. Otherwise returns 'null'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.GetAllObjectsAtOffset``1(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Performs an immediate check for other <see cref="T:MonoGameEngine.GameObject"/>s of the requested TClass type at the given offset from this <see cref="T:MonoGameEngine.GameObject"/>'s current position.
            </summary>
            <typeparam name="TClass">The subclass of <see cref="T:MonoGameEngine.GameObject"/> that should be checked against.</typeparam>
            <param name="offset">The offset coordinates.</param>
            <returns>Returns an array of the other <see cref="T:MonoGameEngine.GameObject"/>s if a collision is found at the offset. Otherwise returns an empty array.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.GetAllObjectsAtOffset``1(System.Int32,System.Int32)">
            <summary>
            [Overload] Performs an immediate check for other <see cref="T:MonoGameEngine.GameObject"/>s of the requested TClass type at the given offset from this <see cref="T:MonoGameEngine.GameObject"/>'s current position.
            </summary>
            <typeparam name="TClass">The subclass of <see cref="T:MonoGameEngine.GameObject"/> that should be checked against.</typeparam>
            <param name="offsetX">The offset x-axis coordinate.</param>
            <param name="offsetY">The offset y-axis coordinate.</param>
            <returns>Returns an array of the other <see cref="T:MonoGameEngine.GameObject"/>s if a collision is found at the offset. Otherwise returns an empty array.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.GetOneObjectAtOffset``1(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Performs an immediate check for a <see cref="T:MonoGameEngine.GameObject"/> of the requested TClass type at the given offset from this <see cref="T:MonoGameEngine.GameObject"/>'s current position.
            </summary>
            <typeparam name="TClass">The subclass of <see cref="T:MonoGameEngine.GameObject"/> that should be checked against.</typeparam>
            <param name="offset">The offset coordinates.</param>
            <returns>Returns the other <see cref="T:MonoGameEngine.GameObject"/> if a collision is found. Otherwise returns 'null'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.GetOneObjectAtOffset``1(System.Int32,System.Int32)">
            <summary>
            [Overload] Performs an immediate check for a <see cref="T:MonoGameEngine.GameObject"/> of the requested TClass type at the given offset from this <see cref="T:MonoGameEngine.GameObject"/>'s current position.
            </summary>
            <typeparam name="TClass">The subclass of <see cref="T:MonoGameEngine.GameObject"/> that should be checked against.</typeparam>
            <param name="offsetX">The offset x-axis coordinate.</param>
            <param name="offsetY">The offset y-axis coordinate.</param>
            <returns>Returns the other <see cref="T:MonoGameEngine.GameObject"/> if a collision is found. Otherwise returns 'null'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.GetOneObjectInRadius``1(System.Nullable{System.Single})">
            <summary>
            Performs an immediate check for a <see cref="T:MonoGameEngine.GameObject"/> of the requested TClass type within a circle boundary represented by the center point of this <see cref="T:MonoGameEngine.GameObject"/> and its largest axis.
            </summary>
            <typeparam name="TClass">The subclass of <see cref="T:MonoGameEngine.GameObject"/> that should be checked against.</typeparam>
            <param name="radius">[Optional] The radius length of the circle that should be used. If left null, the larger of the width/height parameters will be used.</param>
            <returns>Returns the other <see cref="T:MonoGameEngine.GameObject"/> if a collision is found. Otherwise returns 'null'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.IsTouching``1">
            <summary>
            Performs an immediate check for an intersection between the given <see cref="T:MonoGameEngine.GameObject"/> and any another <see cref="T:MonoGameEngine.GameObject"/> of the requested TClass type.
            </summary>
            <typeparam name="TClass">The subclass of <see cref="T:MonoGameEngine.GameObject"/> that should be checked against.</typeparam>
            <returns>Returns 'true' if a collision has taken place between this <see cref="T:MonoGameEngine.GameObject"/> and another of the given subclass. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.IsAtScreenEdge">
            <summary>
            Performs a check on this <see cref="T:MonoGameEngine.GameObject"/>'s current position against the boundaries of the game window.
            </summary>
            <returns>Returns 'true' if an overlap with the screen boundaries is detected. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.IsOffscreen">
            <summary>
            Performs a check to see if this <see cref="T:MonoGameEngine.GameObject"/> is actually visible on the current Screen.
            </summary>
            <returns>Returns 'true' if this <see cref="T:MonoGameEngine.GameObject"/> is completely off-screen in any direction. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.MoveTowards(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
            <summary>
            Incrementally moves the <see cref="T:MonoGameEngine.GameObject"/> towards a target position. Uses deltaTime to provide a smoother movement effect.
            <br/><strong>Note: </strong>Only works when the <see cref="P:MonoGameEngine.GameObject.IsKinematic"/> property is set to 'true' for this <see cref="T:MonoGameEngine.GameObject"/>.
            </summary>
            <param name="target">The on-screen position that the <see cref="T:MonoGameEngine.GameObject"/> should move towards.</param>
            <param name="deltaTime">The time (in seconds) since the last frame of the game.</param>
            <param name="speed">[Optional] The speed at which the <see cref="T:MonoGameEngine.GameObject"/> should move towards target. 1.0f by default. Clamped between 1.0f and 100.0f.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.LookAtPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Immediately rotates this <see cref="T:MonoGameEngine.GameObject"/> to look towards the given target.
            </summary>
            <param name="targetPosition">The screen position that this <see cref="T:MonoGameEngine.GameObject"/> should turn to face.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.OrbitAround(Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Orbits around a given point in a circular motion.
            </summary>
            <param name="center">The on-screen position that the <see cref="T:MonoGameEngine.GameObject"/> should orbit around.</param>
            <param name="loopsPerSecond">The number of times an orbit cycle will be completed per second. Automatically clamped between 0.05f and 5.0f.</param>
            <param name="radius">The distance at which the <see cref="T:MonoGameEngine.GameObject"/> should orbit around the given center.</param>
            <param name="deltaTime">The time (in seconds) since the last frame of the game.</param>
            <param name="orbitClockwise">[Optional] Control to choose which direction the orbit should travel. 'true' by default.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.Pause(System.Single)">
            <summary>
            Pauses updates for this <see cref="T:MonoGameEngine.GameObject"/> for the specified duration. Updates will resume automatically after the pause duration has elapsed.
            </summary>
            <param name="pauseDuration">The time, in seconds, that this <see cref="T:MonoGameEngine.GameObject"/> should pause for.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.GetPosition">
            <summary>
            A getter function for this <see cref="T:MonoGameEngine.GameObject"/>'s screen position.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2"/> object representing the on-screen position of this <see cref="T:MonoGameEngine.GameObject"/>.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.GetX">
            <summary>
            A getter function which returns this <see cref="T:MonoGameEngine.GameObject"/>'s x-axis screen position.
            </summary>
            <returns>A floating-point value representing this <see cref="T:MonoGameEngine.GameObject"/>'s horizontal screen position, in pixels.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.GetY">
            <summary>
            A getter function which returns this <see cref="T:MonoGameEngine.GameObject"/>'s y-axis screen position.
            </summary>
            <returns>A floating-point value representing this <see cref="T:MonoGameEngine.GameObject"/>'s vertical screen position, in pixels.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.GetVelocity">
            <summary>
            A getter function for this <see cref="T:MonoGameEngine.GameObject"/>'s velocity.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2"/> object representing the current velocity of this <see cref="T:MonoGameEngine.GameObject"/>.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.GetSprite">
            <summary>
            A getter function for this <see cref="T:MonoGameEngine.GameObject"/>'s <see cref="T:MonoGameEngine.Sprite"/> or <see cref="T:MonoGameEngine.AnimatedSprite"/>.
            </summary>
            <returns>The <see cref="T:MonoGameEngine.Sprite"/> currently representing this <see cref="T:MonoGameEngine.GameObject"/> on-screen.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.GetBounds">
            <summary>
            A getter function for this <see cref="T:MonoGameEngine.GameObject"/>'s bounding box.
            </summary>
            <returns>The bounding box used by this <see cref="T:MonoGameEngine.GameObject"/>.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.IsSolid">
            <summary>
            A getter function for this <see cref="T:MonoGameEngine.GameObject"/>'s 'solid' flag, for collision purposes.
            </summary>
            <returns>A boolean value representing whether or not this <see cref="T:MonoGameEngine.GameObject"/> should be considered 'solid'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.IsVisible">
            <summary>
            A getter function for this <see cref="T:MonoGameEngine.GameObject"/>'s 'visible' flag, for rendering purposes.
            </summary>
            <returns>A boolean value representing whether or not this <see cref="T:MonoGameEngine.GameObject"/> should be considered 'visible'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.IsActive">
            <summary>
            A getter function for this <see cref="T:MonoGameEngine.GameObject"/>'s 'active' flag, for updating purposes.
            </summary>
            <returns>A boolean value representing whether or not this <see cref="T:MonoGameEngine.GameObject"/> is currently receiving updates.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.GetCenter">
            <summary>
            Calculates the center point of this <see cref="T:MonoGameEngine.GameObject"/>, using its bounding box.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2"/> containing the coordinates of the center point of this <see cref="T:MonoGameEngine.GameObject"/>.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.GetAnimatedSprite">
            <summary>
            A getter function which will return the <see cref="T:MonoGameEngine.GameObject"/>'s sprite, if it currently uses an <see cref="T:MonoGameEngine.AnimatedSprite"/>.
            </summary>
            <returns>The sprite being used by the <see cref="T:MonoGameEngine.GameObject"/> (cast as an <see cref="T:MonoGameEngine.AnimatedSprite"/>) if appropriate. Otherwise returns 'null'.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.GetScreen">
            <summary>
            A getter function to access the current <see cref="T:MonoGameEngine.Screen"/>.
            </summary>
            <returns>A reference to the current <see cref="T:MonoGameEngine.Screen"/> object.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.SetPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            A setter function to reposition this <see cref="T:MonoGameEngine.GameObject"/> onscreen.
            </summary>
            <param name="position">A <see cref="T:Microsoft.Xna.Framework.Vector2"/> object containing the x and y co-ordinates for the new position.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.SetPosition(System.Int32,System.Int32)">
            <summary>
            [Overload] A setter function to reposition this <see cref="T:MonoGameEngine.GameObject"/> onscreen.
            </summary>
            <param name="x">An integer value representing the new position for this GameObject in the x-axis.</param>
            <param name="y">An integer value representing the new position for this GameObject in the y-axis.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.SetPosition(System.Single,System.Single)">
            <summary>
            [Overload] A setter function to reposition this <see cref="T:MonoGameEngine.GameObject"/> onscreen.
            </summary>
            <param name="x">A floating-point value representing the new position for this GameObject in the x-axis.</param>
            <param name="y">A floating-point value representing the new position for this GameObject in the y-axis.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.RevertPosition">
            <summary>
            A function which reverts this <see cref="T:MonoGameEngine.GameObject"/>'s position to the co-ordinates from before the most recent call to SetPosition().
            </summary>
        </member>
        <member name="M:MonoGameEngine.GameObject.RevertPosition(System.Boolean,System.Boolean)">
            <summary>
            [Overload] A function which reverts this <see cref="T:MonoGameEngine.GameObject"/>'s position to the co-ordinates from before the most recent call to SetPosition().
            </summary>
            <param name="revertToX">A boolean value representing whether or not to revert the x co-ordinates.</param>
            <param name="revertToY">A boolean value representing whether or not to revert the y co-ordinates.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.AddVelocity(Microsoft.Xna.Framework.Vector2)">
            <summary>
            A function which adds the given deltaVelocity to the current velocity of this <see cref="T:MonoGameEngine.GameObject"/>.
            </summary>
            <param name="deltaVelocity">A <see cref="T:Microsoft.Xna.Framework.Vector2"/> object representing the amount of velocity to add to the existing velocity.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.AddVelocity(System.Single,System.Single)">
            <summary>
            [Overload] A function which adds the given deltaVelocity to the current velocity of this <see cref="T:MonoGameEngine.GameObject"/>.
            </summary>
            <param name="xVelocity">A floating point value representing the change desired to this <see cref="T:MonoGameEngine.GameObject"/>'s horizontal velocity.</param>
            <param name="yVelocity">A floating point value representing the change desired to this <see cref="T:MonoGameEngine.GameObject"/>'s vertical velocity.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.SetVelocity(Microsoft.Xna.Framework.Vector2)">
            <summary>
            A setter function which allows the velocity of this <see cref="T:MonoGameEngine.GameObject"/> to be directly changed.
            </summary>
            <param name="velocity">A <see cref="T:Microsoft.Xna.Framework.Vector2"/> object representing the new horizontal and vertical velocities of this <see cref="T:MonoGameEngine.GameObject"/>.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.SetVelocity(System.Single,System.Single)">
            <summary>
            [Overload] A setter function which allows the velocity of this <see cref="T:MonoGameEngine.GameObject"/> to be directly changed.
            </summary>
            <param name="xVelocity">A floating point value representing the <see cref="T:MonoGameEngine.GameObject"/>'s horizontal velocity.</param>
            <param name="yVelocity">A floating point value representing the <see cref="T:MonoGameEngine.GameObject"/>'s vertical velocity.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.SetActive(System.Boolean)">
            <summary>
            A setter function which allows this <see cref="T:MonoGameEngine.GameObject"/> to start or stop actively updating (i.e. automatic calls to the Update() method). Rendering will still take place regardless of whether or not this <see cref="T:MonoGameEngine.GameObject"/> is currently updating.
            </summary>
            <param name="isActive">A boolean value representing whether or not this <see cref="T:MonoGameEngine.GameObject"/> should be actively updated.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.SetVisible(System.Boolean)">
            <summary>
            A setter function which allows this <see cref="T:MonoGameEngine.GameObject"/> to start or stop rendering to the screen. Collisions and other functional updates will still occur regardless of whether or not rendering takes place.
            </summary>
            <param name="isVisible">A boolean value representing whether or not this <see cref="T:MonoGameEngine.GameObject"/> should be rendered to the screen.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.SetDrawDebug(System.Boolean,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            A setter function which enables or disables the drawing of a rectangle representing this <see cref="T:MonoGameEngine.GameObject"/>'s bounding box.
            </summary>
            <param name="drawDebug">A boolean value representing whether or not to render this <see cref="T:MonoGameEngine.GameObject"/>'s bounds.</param>
            <param name="drawColour">[Optional] A <see cref="T:Microsoft.Xna.Framework.Color"/> object representing the colour desired for rendering the debug bounds. Automatically sets Alpha value to 128.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.SetDebugColour(Microsoft.Xna.Framework.Color)">
            <summary>
            A setter function which can adjust the render colour of the debug bounds rendering for this <see cref="T:MonoGameEngine.GameObject"/>.
            </summary>
            <param name="colour">A <see cref="T:Microsoft.Xna.Framework.Color"/> object representing the colour desired for rendering the debug bounds. Automatically sets Alpha value to 128.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.SetBounds(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            A setter function which can adjust the bounding box of this <see cref="T:MonoGameEngine.GameObject"/>.
            </summary>
            <param name="bounds">A <see cref="T:Microsoft.Xna.Framework.Rectangle"/> object representing the desired bounding box dimensions.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.SetBounds(System.Int32,System.Int32)">
            <summary>
            [Overload] A setter function which can adjust the bounding box of this <see cref="T:MonoGameEngine.GameObject"/>.
            </summary>
            <param name="width">The desired width of the bounding box.</param>
            <param name="height">The desired height of the bounding box.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.SetSprite(MonoGameEngine.Sprite,System.Boolean)">
            <summary>
            A setter function for assigning a new <see cref="T:MonoGameEngine.Sprite"/> to visually represent this <see cref="T:MonoGameEngine.GameObject"/>.
            </summary>
            <param name="sprite">The <see cref="T:MonoGameEngine.Sprite"/> instance that should be used by this GameObject.</param>
            <param name="inWorldSpace">[Optional] A boolean representing whether to draw this <see cref="T:MonoGameEngine.Sprite"/> in world space or screen space.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.SetSprite(Microsoft.Xna.Framework.Graphics.Texture2D,System.Boolean)">
            <summary>
            [Overload] A setter function for assigning a new <see cref="T:MonoGameEngine.Sprite"/> to visually represent this <see cref="T:MonoGameEngine.GameObject"/>.
            </summary>
            <param name="spriteImage">The image file that should be used by this <see cref="T:MonoGameEngine.GameObject"/>'s new <see cref="T:MonoGameEngine.Sprite"/>.</param>
            <param name="inWorldSpace">[Optional] A boolean representing whether to draw this Sprite in world space or screen space.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.SetSprite(System.String,System.Boolean)">
            <summary>
            [Overload] A setter function for assigning a new <see cref="T:MonoGameEngine.Sprite"/> to visually represent this <see cref="T:MonoGameEngine.GameObject"/>.
            </summary>
            <param name="spriteName">The name of an image file that should be used by this <see cref="T:MonoGameEngine.GameObject"/>'s new <see cref="T:MonoGameEngine.Sprite"/>.</param>
            <param name="inWorldSpace">[Optional] A boolean representing whether to draw this <see cref="T:MonoGameEngine.Sprite"/> in world space or screen space.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.SetSprite(System.String,System.Int32,System.Int32,System.Single,System.Int32[],MonoGameEngine.LoopType,System.Boolean)">
            <summary>
            [Overload] A setter function for assigning a new <see cref="T:MonoGameEngine.AnimatedSprite"/> to visually represent this <see cref="T:MonoGameEngine.GameObject"/>.
            </summary>
            <param name="spritesheet">The name of the spritesheet that should be used for rendering.</param>
            <param name="frameWidth">The width of each frame of animation in the spritesheet (in pixels).</param>
            <param name="frameHeight">The height of each frame of animation in the spritesheet (in pixels).</param>
            <param name="animationSpeed">The speed at which the animation should cycle between its frames (in seconds).</param>
            <param name="framesPerAnimation">An array of integers, with each integer representing the frame count of the corresponding animation sequence.</param>
            <param name="loopType">[Optional] The type of animation looping that should be used. '<see cref="F:MonoGameEngine.LoopType.Standard"/>' by default.</param>
            <param name="inWorldSpace">[Optional] A boolean representing whether to draw this <see cref="T:MonoGameEngine.Sprite"/> in world space or screen space.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.SetSprite(System.String,System.Int32,System.Single,System.Int32[],MonoGameEngine.LoopType,System.Boolean)">
            <summary>
            [Overload] A setter function for assigning a new <see cref="T:MonoGameEngine.AnimatedSprite"/> to visually represent this <see cref="T:MonoGameEngine.GameObject"/>.
            </summary>
            <param name="spritesheet">The name of the spritesheet that should be used for rendering.</param>
            <param name="frameSize">The width and height of each frame of animation in the spritesheet. This requires cells of matching widths and heights.</param>
            <param name="animationSpeed">The speed at which the animation should cycle between its frames (in seconds).</param>
            <param name="framesPerAnimation">An array of integers, with each integer representing the frame count of the corresponding animation sequence.</param>
            <param name="loopType">[Optional] The type of animation looping that should be used. '<see cref="F:MonoGameEngine.LoopType.Standard"/>' by default.</param>
            <param name="inWorldSpace">[Optional] A boolean representing whether to draw this <see cref="T:MonoGameEngine.Sprite"/> in world space or screen space.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.AttachParticleSystem(MonoGameEngine.Code.ParticleEngine.BaseParticleSystem)">
            <summary>
            Attach a particle emitter to this <see cref="T:MonoGameEngine.GameObject"/>. The ParticleSystem will then be updated and rendered by this <see cref="T:MonoGameEngine.GameObject"/>.
            </summary>
            <param name="particleSystem">The ParticleSystem to be attached to this <see cref="T:MonoGameEngine.GameObject"/>.</param>
        </member>
        <member name="M:MonoGameEngine.GameObject.GetAttachedParticleEmitters">
            <summary>
            A getter function which retrieves all the attached ParticleEmitters on this <see cref="T:MonoGameEngine.GameObject"/>.
            </summary>
            <returns>A List structure containing all attached ParticleEmitters.</returns>
        </member>
        <member name="M:MonoGameEngine.GameObject.SetScreen(MonoGameEngine.Screen)">
            <summary>
            A setter function which can assign a new parent Screen to this <see cref="T:MonoGameEngine.GameObject"/>. <b>Called automatically by the current <see cref="T:MonoGameEngine.Screen"/></b>.
            </summary>
            <param name="screen">A <see cref="T:MonoGameEngine.Screen"/> object representing the new parent object of this <see cref="T:MonoGameEngine.GameObject"/>.</param>
        </member>
        <member name="T:MonoGameEngine.RayCast">
            <summary>A class which represents a raycast from one point (in screen space) to another.</summary>
        </member>
        <member name="M:MonoGameEngine.RayCast.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            A constructor which will generate the vector direction based on the given coordinates.
            </summary>
            <param name="startPos">A <see cref="T:Microsoft.Xna.Framework.Vector2"/> object representing the starting point of this <see cref="T:MonoGameEngine.RayCast"/>.</param>
            <param name="endPos">A <see cref="T:Microsoft.Xna.Framework.Vector2"/> object representing the end point of this <see cref="T:MonoGameEngine.RayCast"/>.</param>
        </member>
        <member name="M:MonoGameEngine.RayCast.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            A constructor which will generate the end point of this <see cref="T:MonoGameEngine.RayCast"/> using the direction and length provided.
            </summary>
            <param name="startPos">A <see cref="T:Microsoft.Xna.Framework.Vector2"/> object representing the starting point of this <see cref="T:MonoGameEngine.RayCast"/>.</param>
            <param name="direction">A <see cref="T:Microsoft.Xna.Framework.Vector2"/> object representing the direction this <see cref="T:MonoGameEngine.RayCast"/> should travel.</param>
            <param name="length">A floating-point value representing the length of the desired <see cref="T:MonoGameEngine.RayCast"/> (in pixels).</param>
        </member>
        <member name="M:MonoGameEngine.RayCast.IsPointOnVector(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Checks to see if a single, given point can be found on this <see cref="T:MonoGameEngine.RayCast"/>'s line.
            </summary>
            <param name="point">The point that should be checked against this <see cref="T:MonoGameEngine.RayCast"/>'s line.</param>
            <returns>Returns 'true' if the point exists along this <see cref="T:MonoGameEngine.RayCast"/>'s line. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.RayCast.CheckBoundHit(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Method used to check whether or not this <see cref="T:MonoGameEngine.RayCast"/> will intersect a given <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.
            </summary>
            <param name="bounds">The Rectangle we want to check against.</param>
            <returns>Returns true if the <see cref="T:Microsoft.Xna.Framework.Rectangle"/> is intersected by this <see cref="T:MonoGameEngine.RayCast"/>. Otherwise, returns false.</returns>
        </member>
        <member name="M:MonoGameEngine.RayCast.LineIntersection(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Method that can check if another Vector (from the start and end points provided) intersects this <see cref="T:MonoGameEngine.RayCast"/>.
            </summary>
            <param name="lineStart">The start point of the vector to check.</param>
            <param name="lineEnd">The end point of the vector to check.</param>
            <returns>Returns 'true' if an intersection is detected. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.RayCast.GetDirection">
            <summary>
            A simple getter method to calculate the direction of this <see cref="T:MonoGameEngine.RayCast"/>.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2"/> containing the direction values of this <see cref="T:MonoGameEngine.RayCast"/>.</returns>
        </member>
        <member name="M:MonoGameEngine.RayCast.GetLength">
            <summary>
            A getter method which calculates the length (magnitude) of this <see cref="T:MonoGameEngine.RayCast"/>.
            </summary>
            <returns>Returns a float value of the calculated length of this line.</returns>
        </member>
        <member name="T:MonoGameEngine.Screen">
            <summary>The base <see cref="T:MonoGameEngine.Screen"/> class, from which all of a game's screens should derive.</summary>
        </member>
        <member name="F:MonoGameEngine.Screen._core">
            <summary>A reference to the Game's <see cref="T:MonoGameEngine.Core"/>, allowing access to some high-level functionality.</summary>
        </member>
        <member name="F:MonoGameEngine.Screen._gameObjects">
            <summary>A collection of all the <see cref="T:MonoGameEngine.GameObject"/>s existing in this <see cref="T:MonoGameEngine.Screen"/>. All new GameObjects should be placed in this collection for automatic updating and rendering.</summary>
        </member>
        <member name="F:MonoGameEngine.Screen._text">
            <summary>A collection of all the <see cref="T:MonoGameEngine.Text"/> objects existing in this Screen. All new Text objects should be placed in this collection for automatic rendering.</summary>
        </member>
        <member name="F:MonoGameEngine.Screen._removedObjects">
            <summary>A collection of all the GameObjects that have been flagged to be removed at the end of this frame. <em>CAUTION WHEN HANDLING</em>.</summary>
        </member>
        <member name="F:MonoGameEngine.Screen._removedText">
            <summary>A collection of all the Text that have been flagged to be removed at the end of this frame. <em>CAUTION WHEN HANDLING</em>.</summary>
        </member>
        <member name="F:MonoGameEngine.Screen._addedObjects">
            <summary>A collection of all the GameObjects that have been flagged to be added at the end of this frame. <em>CAUTION WHEN HANDLING</em>.</summary>
        </member>
        <member name="M:MonoGameEngine.Screen.Start(MonoGameEngine.Core)">
            <summary>
            Performs some basic setup required by every <see cref="T:MonoGameEngine.Screen"/>. Can be overridden to perform more bespoke initialisation if needed.
            </summary>
            <param name="core">The game <see cref="T:MonoGameEngine.Core"/> of the current project.</param>
        </member>
        <member name="M:MonoGameEngine.Screen.End">
            <summary>
            Performs general clean-up for this class. Can be overridden to provide more bespoke clean-up functionality as needed.
            </summary>
        </member>
        <member name="M:MonoGameEngine.Screen.Update(System.Single)">
            <summary>
            Performs the root updating functionality for the game. Can be overridden to provide more bespoke updating as needed.
            </summary>
            <param name="deltaTime">The time (in seconds) since the last frame of the game.</param>
        </member>
        <member name="M:MonoGameEngine.Screen.Render(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Performs the standard rendering of this <see cref="T:MonoGameEngine.Screen"/>. Can be overridden with more bespoke rendering functionality if needed.
            </summary>
            <param name="spriteBatch">The current batch of sprites to be rendered this frame of the game.</param>
        </member>
        <member name="M:MonoGameEngine.Screen.PreRender(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Called internally for pre-render setup.
            </summary>
        </member>
        <member name="M:MonoGameEngine.Screen.PostRender(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Called internally for post-render clean-up.
            </summary>
        </member>
        <member name="M:MonoGameEngine.Screen.Restart">
            <summary>
            Calls the <see cref="T:MonoGameEngine.Screen"/>'s Start method again, for the purposes of resetting the current <see cref="T:MonoGameEngine.Screen"/> to its starting state.
            </summary>
        </member>
        <member name="M:MonoGameEngine.Screen.SetParallaxStrength(System.Single)">
            <summary>
            A setter method for changing the amount of parallaxing applied to each Background layer of this <see cref="T:MonoGameEngine.Screen"/>. '1.0f' is the default. Values are clamped between '0.5f' and '2.0f'.
            </summary>
            <param name="parallaxStrength">The parallax multiplier to be applied to each <see cref="T:MonoGameEngine.Background"/> layer when moving. A higher number results in a higher speed, and a lower number results in a lower speed.</param>
        </member>
        <member name="M:MonoGameEngine.Screen.AddObject(MonoGameEngine.GameObject,System.Int32,System.Int32)">
            <summary>
            Allows a <see cref="T:MonoGameEngine.GameObject"/> to be added to the automatic update and render collection.
            </summary>
            <param name="obj">The new <see cref="T:MonoGameEngine.GameObject"/> for the <see cref="T:MonoGameEngine.Screen"/> to handle.</param>
            <param name="x">An integer value representing the horizontal position on the <see cref="T:MonoGameEngine.Screen"/> to place the new <see cref="T:MonoGameEngine.GameObject"/>.</param>
            <param name="y">An integer value representing the vertical position on the <see cref="T:MonoGameEngine.Screen"/> to place the new <see cref="T:MonoGameEngine.GameObject"/>.</param>
        </member>
        <member name="M:MonoGameEngine.Screen.AddObject(MonoGameEngine.GameObject,System.Int32,System.Int32,System.String)">
            <summary>
            [Overload] Allows a <see cref="T:MonoGameEngine.GameObject"/> to be added to the automatic update and render collection.
            </summary>
            <param name="obj">The new <see cref="T:MonoGameEngine.GameObject"/> for the <see cref="T:MonoGameEngine.Screen"/> to handle.</param>
            <param name="x">An integer value representing the horizontal position on the <see cref="T:MonoGameEngine.Screen"/> to place the new <see cref="T:MonoGameEngine.GameObject"/>.</param>
            <param name="y">An integer value representing the vertical position on the <see cref="T:MonoGameEngine.Screen"/> to place the new <see cref="T:MonoGameEngine.GameObject"/>.</param>
            <param name="spriteName">A string value representing the name of the sprite this new <see cref="T:MonoGameEngine.GameObject"/> should use for rendering.</param>
        </member>
        <member name="M:MonoGameEngine.Screen.RemoveObject(MonoGameEngine.GameObject)">
            <summary>
            Removes the given <see cref="T:MonoGameEngine.GameObject"/> from the <see cref="T:MonoGameEngine.Screen"/> at the end of the current frame of the game. 
            </summary>
            <param name="obj">The <see cref="T:MonoGameEngine.GameObject"/> that should be removed from the <see cref="T:MonoGameEngine.Screen"/>.</param>
        </member>
        <member name="M:MonoGameEngine.Screen.ClearObjects">
            <summary>
            Clears all 'removed' <see cref="T:MonoGameEngine.GameObject"/>s and <see cref="T:MonoGameEngine.Text"/> from the <see cref="T:MonoGameEngine.Screen"/>. This is used in conjunction with RemoveObject() and RemoveText().
            </summary>
        </member>
        <member name="M:MonoGameEngine.Screen.AppendObjects">
            <summary>
            Appends the <see cref="T:MonoGameEngine.GameObject"/>s created this frame of the game. This is used in conjunction with AddObject().
            </summary>
        </member>
        <member name="M:MonoGameEngine.Screen.GetAllObjects">
            <summary>
            Allows access to the entire collection of <see cref="T:MonoGameEngine.GameObject"/>s currently handled by the <see cref="T:MonoGameEngine.Screen"/>.
            </summary>
            <returns>Returns a standard array of all <see cref="T:MonoGameEngine.GameObject"/>s that this <see cref="T:MonoGameEngine.Screen"/> currently handles.</returns>
        </member>
        <member name="M:MonoGameEngine.Screen.GetAllObjectsOfType``1">
            <summary>
            Provides an array of objects of a specified type that currently exist in this <see cref="T:MonoGameEngine.Screen"/>.
            </summary>
            <typeparam name="TClass">The subclass type of <see cref="T:MonoGameEngine.GameObject"/>s that should be found.</typeparam>
            <returns>Returns an array of <see cref="T:MonoGameEngine.GameObject"/>s of a specified type that this <see cref="T:MonoGameEngine.Screen"/> can find.</returns>
        </member>
        <member name="M:MonoGameEngine.Screen.GetOneObjectOfType``1">
            <summary>
            Provides the first object of the specified type that exists in this <see cref="T:MonoGameEngine.Screen"/>.
            </summary>
            <typeparam name="TObject">The subclass type of <see cref="T:MonoGameEngine.GameObject"/> that should be found.</typeparam>
            <returns>Returns the first instance of the specified type that this <see cref="T:MonoGameEngine.Screen"/> can find as a <see cref="T:MonoGameEngine.GameObject"/>.</returns>
        </member>
        <member name="M:MonoGameEngine.Screen.AddText(MonoGameEngine.Text,System.Int32,System.Int32)">
            <summary>
            Allows a <see cref="T:MonoGameEngine.Text"/> object to be added to the automatic render collection.
            </summary>
            <param name="text">The new <see cref="T:MonoGameEngine.Text"/> object for the <see cref="T:MonoGameEngine.Screen"/> to handle.</param>
            <param name="x">An integer value representing the horizontal position on the <see cref="T:MonoGameEngine.Screen"/> to place the new <see cref="T:MonoGameEngine.Text"/> object.</param>
            <param name="y">An integer value representing the vertical position on the <see cref="T:MonoGameEngine.Screen"/> to place the new <see cref="T:MonoGameEngine.Text"/> object.</param>
        </member>
        <member name="M:MonoGameEngine.Screen.RemoveText(MonoGameEngine.Text)">
            <summary>
            Removes the given <see cref="T:MonoGameEngine.Text"/> from the <see cref="T:MonoGameEngine.Screen"/> at the end of the current frame of the game. 
            </summary>
            <param name="text">The <see cref="T:MonoGameEngine.Text"/> object that should be removed from the <see cref="T:MonoGameEngine.Screen"/>.</param>
        </member>
        <member name="M:MonoGameEngine.Screen.GetText">
            <summary>
            Allows access to the entire collection of Text objects currently handled by the <see cref="T:MonoGameEngine.Screen"/>.
            </summary>
            <returns>A standard array of <see cref="T:MonoGameEngine.Text"/> objects.</returns>
        </member>
        <member name="M:MonoGameEngine.Screen.SetColourSaturation(System.Single)">
            <summary>
            Provides access to changing the colour saturation of this <see cref="T:MonoGameEngine.Screen"/>. Saturation is clamped between 0 and 1. Value set to 1.0f by default.
            </summary>
            <param name="saturation">The new saturation value (clamped between 0 and 1).</param>
        </member>
        <member name="M:MonoGameEngine.Screen.GetColourSaturation">
            <summary>
            Provides access to the colour saturation for this <see cref="T:MonoGameEngine.Screen"/>.
            </summary>
            <returns>A floating point value from 0.0 - 1.0 representing the saturation of the colours in this Screen. </returns>
        </member>
        <member name="M:MonoGameEngine.Screen.SetBackground(System.String,MonoGameEngine.BackgroundType,System.Int32)">
            <summary>
            Allows a <see cref="T:MonoGameEngine.Background"/> image to be set for this <see cref="T:MonoGameEngine.Screen"/>. The texture will be stretched to fit window, by default.
            </summary>
            <param name="name">A simple string for the name of the <see cref="T:MonoGameEngine.Background"/>. No filetype (.png, .jpg, etc.) required.</param>
            <param name="type">[Optional] An enumerated value representing how the <see cref="T:MonoGameEngine.Background"/> should be rendered. Defaults to '<see cref="F:MonoGameEngine.BackgroundType.Stretch"/>'.</param>
            <param name="index">[Optional] The index of the <see cref="T:MonoGameEngine.Background"/> (also used as the render layer). Defaults to '9', the furthest background from the camera..</param>
        </member>
        <member name="M:MonoGameEngine.Screen.GetBackground(System.Int32)">
            <summary>
            Getter method for accessing the <see cref="T:MonoGameEngine.Background"/> instance belonging to this <see cref="T:MonoGameEngine.Screen"/>.
            </summary>
            <param name="index">[Optional] The index of the <see cref="T:MonoGameEngine.Background"/> in this <see cref="T:MonoGameEngine.Screen"/>. Defaults to '9', the furthest background from the camera.</param>
            <returns>A <see cref="T:MonoGameEngine.Background"/> object representing the background visual elements being rendered.</returns>
        </member>
        <member name="M:MonoGameEngine.Screen.GetFont">
            <summary>
            Getter method for accessing the primary font set for the game. This font can be adjusted in the Font.spritefont file in the Content folder of the project.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteFont"/> object for use when drawing text.</returns>
        </member>
        <member name="M:MonoGameEngine.Screen.GetWorldBounds">
            <summary>
            Getter method for accessing the rectangle representing this <see cref="T:MonoGameEngine.Screen"/>'s world boundaries.
            </summary>
            <returns>Returns a <see cref="T:Microsoft.Xna.Framework.Rectangle"/> object representing the world edges.</returns>
        </member>
        <member name="M:MonoGameEngine.Screen.SetWorldBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Setter method for adjusting the world boundaries for this <see cref="T:MonoGameEngine.Screen"/>. Used in conjunction with <see cref="T:MonoGameEngine.Camera"/> scrolling.
            </summary>
            <param name="x">The on-screen horizontal position that the <see cref="T:Microsoft.Xna.Framework.Rectangle"/> should start from.</param>
            <param name="y">The on-screen vertical position that the <see cref="T:Microsoft.Xna.Framework.Rectangle"/> should start from.</param>
            <param name="width">The width of the world bounds from the x position.</param>
            <param name="height">The height of the world bounds from the y position.</param>
        </member>
        <member name="M:MonoGameEngine.Screen.SetWorldBounds(System.Int32,System.Int32)">
            <summary>
            [Overload] Setter method for adjusting the world boundaries for this <see cref="T:MonoGameEngine.Screen"/>. Used in conjunction with <see cref="T:MonoGameEngine.Camera"/> scrolling.
            </summary>
            <param name="width">The width of the world bounds from x co-ordinate '0'.</param>
            <param name="height">The height of the world bounds from y co-ordinate '0'.</param>
        </member>
        <member name="M:MonoGameEngine.Screen.SetWorldBounds(Microsoft.Xna.Framework.Vector2)">
            <summary>
            [Overload] Setter method for adjusting the world boundaries for this <see cref="T:MonoGameEngine.Screen"/>. Used in conjunction with <see cref="T:MonoGameEngine.Camera"/> scrolling.
            </summary>
            <param name="dimensions">A vector representing the width and height of this <see cref="T:MonoGameEngine.Screen"/>'s world, starting at origin (0,0).</param>
        </member>
        <member name="M:MonoGameEngine.Screen.SetWorldBounds(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            [Overload] Setter method for adjusting the world boundaries for this <see cref="T:MonoGameEngine.Screen"/>. Used in conjunction with <see cref="T:MonoGameEngine.Camera"/> scrolling.
            </summary>
            <param name="rect">A rectangle representing the desired bounds of this <see cref="T:MonoGameEngine.Screen"/>'s world.</param>
        </member>
        <member name="M:MonoGameEngine.Screen.Pause(System.Single)">
            <summary>
            Pauses updates to the entire <see cref="T:MonoGameEngine.Screen"/> for the specified duration, in seconds. <see cref="T:MonoGameEngine.AudioManager"/>, <see cref="T:MonoGameEngine.Transition"/> and <see cref="T:MonoGameEngine.Camera"/> remain unaffected. <br/>
            <strong>NOTE:</strong> This will also pause the adding and removing of <see cref="T:MonoGameEngine.GameObject"/>s within the <see cref="T:MonoGameEngine.Screen"/>.
            </summary>
            <param name="pauseDuration">The amount of time, in seconds, that the <see cref="T:MonoGameEngine.Screen"/> should remain paused.</param>
        </member>
        <member name="T:MonoGameEngine.Sprite">
            <summary>A class which can handle a static sprite image.</summary>
        </member>
        <member name="M:MonoGameEngine.Sprite.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Color},System.Int32)">
            <summary>
            The constructor for this class.
            </summary>
            <param name="texture">The image that should be used by this <see cref="T:MonoGameEngine.Sprite"/> object.</param>
            <param name="tint">[Optional] The tint with which this <see cref="T:MonoGameEngine.Sprite"/>'s image should be rendered. White by default.</param>
            <param name="layerDepth">[Optional] The depth at which this <see cref="T:MonoGameEngine.Sprite"/> should be rendered. '5' by default.</param>
        </member>
        <member name="M:MonoGameEngine.Sprite.GetBounds">
            <summary>
            A getter method which returns the <see cref="T:Microsoft.Xna.Framework.Rectangle"/> representing the bounding box of this <see cref="T:MonoGameEngine.Sprite"/>.
            </summary>
            <returns>Returns a <see cref="T:Microsoft.Xna.Framework.Rectangle"/> object which represents the edges of this <see cref="T:MonoGameEngine.Sprite"/>'s image.</returns>
        </member>
        <member name="M:MonoGameEngine.Sprite.GetWidth">
            <summary>
            A getter method which returns the width (in pixels) of this <see cref="T:MonoGameEngine.Sprite"/>'s image.
            </summary>
            <returns>Returns an integer value representing this <see cref="T:MonoGameEngine.Sprite"/>'s width.</returns>
        </member>
        <member name="M:MonoGameEngine.Sprite.GetHeight">
            <summary>
            A getter method which returns the height (in pixels) of this Sprite's image.
            </summary>
            <returns>Returns an integer value representing this <see cref="T:MonoGameEngine.Sprite"/>'s height.</returns>
        </member>
        <member name="M:MonoGameEngine.Sprite.GetOrigin">
            <summary>
            A getter method which returns the fractional origin of this <see cref="T:MonoGameEngine.Sprite"/>'s origin.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2"/> object containing the normalised fractional origin that this <see cref="T:MonoGameEngine.Sprite"/> draws from.</returns>
        </member>
        <member name="M:MonoGameEngine.Sprite.GetCenter">
            <summary>
            A getter method which returns the position of this <see cref="T:MonoGameEngine.Sprite"/>'s origin.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2"/> object containing the coordinates of this <see cref="T:MonoGameEngine.Sprite"/>'s center point.</returns>
        </member>
        <member name="M:MonoGameEngine.Sprite.GetTint">
            <summary>
            A getter method which returns the current rendering tint used by this <see cref="T:MonoGameEngine.Sprite"/>.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Color"/> object containing the RGBA values used when tinting this <see cref="T:MonoGameEngine.Sprite"/>'s image.</returns>
        </member>
        <member name="M:MonoGameEngine.Sprite.GetLayerDepth">
            <summary>
            A getter method which returns the current rendering depth of this <see cref="T:MonoGameEngine.Sprite"/>. The lower the number, the earlier this <see cref="T:MonoGameEngine.Sprite"/>'s image will be drawn in the render order.
            </summary>
            <returns>An integer value representing the layer depth of this <see cref="T:MonoGameEngine.Sprite"/>.</returns>
        </member>
        <member name="M:MonoGameEngine.Sprite.GetRotation">
            <summary>
            A getter method which returns the current rotation (in degrees) that this <see cref="T:MonoGameEngine.Sprite"/>'s image will be drawn at.
            </summary>
            <returns>A floating-point value representing the rotation of this <see cref="T:MonoGameEngine.Sprite"/>'s image.</returns>
        </member>
        <member name="M:MonoGameEngine.Sprite.GetFillColour">
            <summary>
            A getter method which returns the colour used to fill all the pixels of this <see cref="T:MonoGameEngine.Sprite"/>, ignoring alpha (transparency).
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Color"/> object containing the RGBA values used when filling this <see cref="T:MonoGameEngine.Sprite"/>'s image.</returns>
        </member>
        <member name="M:MonoGameEngine.Sprite.GetFillEffectStrength">
            <summary>
            A getter method which returns the strength of the 'fill' pixel effect's blending. 
            <br/>1.0f will completely fill the Sprite with the fill colour, and 0.0f will ignore the fill colour.
            </summary>
            <returns>A floating point number which represents the amount of blending the fill colour has with the <see cref="T:MonoGameEngine.Sprite"/>'s original colours.</returns>
        </member>
        <member name="M:MonoGameEngine.Sprite.SetRotation(System.Single)">
            <summary>
            A setter method for setting the rotation (in degrees) of this <see cref="T:MonoGameEngine.Sprite"/>.
            </summary>
            <param name="rotation">The rotation (in degrees) to render this <see cref="T:MonoGameEngine.Sprite"/> at.</param>
        </member>
        <member name="M:MonoGameEngine.Sprite.SetLayerDepth(System.Int32)">
            <summary>
            A setter method for changing the render layer depth of this <see cref="T:MonoGameEngine.Sprite"/>. '5' by default.
            </summary>
            <param name="layerDepth">The layer depth to render this sprite at. The higher the number, the closer to the background the <see cref="T:MonoGameEngine.Sprite"/> will be rendered.</param>
        </member>
        <member name="M:MonoGameEngine.Sprite.SetScale(System.Single,System.Single)">
            <summary>
            A setter method which sets the fractional scale for this <see cref="T:MonoGameEngine.Sprite"/>, per axis. Scale values are (1,1) by default.
            </summary>
            <param name="scaleX">Decimal value to scale the x-axis by.</param>
            <param name="scaleY">Decimal value to scale the y-axis by.</param>
        </member>
        <member name="M:MonoGameEngine.Sprite.GetScale">
            <summary>
            A getter method which gets the current fractional scale for this <see cref="T:MonoGameEngine.Sprite"/>.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2"/> object containing the floating point fractional value used for scaling this <see cref="T:MonoGameEngine.Sprite"/>.</returns>
        </member>
        <member name="M:MonoGameEngine.Sprite.SetOrigin(System.Single,System.Single)">
            <summary>
            A setter method which sets the origin point for this <see cref="T:MonoGameEngine.Sprite"/>. Values should be between 0.0f and 1.0f. Origin point is (0.0f, 0.0f) by default.
            </summary>
            <param name="originX">Fraction of the width of the sprite. Value should be between 0.0f and 1.0f.</param>
            <param name="originY">Fraction of the height of the sprite. Value should be between 0.0f and 1.0f.</param>
        </member>
        <member name="M:MonoGameEngine.Sprite.SetTint(Microsoft.Xna.Framework.Color)">
            <summary>
            A setter method which sets the render tint for this <see cref="T:MonoGameEngine.Sprite"/>. Tint is White by default.
            </summary>
            <param name="tint">The <see cref="T:Microsoft.Xna.Framework.Color"/> with which to tint the rendered <see cref="T:MonoGameEngine.Sprite"/> image.</param>
        </member>
        <member name="M:MonoGameEngine.Sprite.SetTint(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            [Override] A setter method which sets the render tint for this <see cref="T:MonoGameEngine.Sprite"/> using separate colour values. Tint is 255, 255, 255 by default.
            </summary>
            <param name="r">An integer value representing the red colour channel for the new <see cref="T:Microsoft.Xna.Framework.Color"/>. Value is clamped between 0 and 255.</param>
            <param name="b">An integer value representing the blue colour channel for the new <see cref="T:Microsoft.Xna.Framework.Color"/>. Value is clamped between 0 and 255.</param>
            <param name="g">An integer value representing the green colour channel for the new <see cref="T:Microsoft.Xna.Framework.Color"/>. Value is clamped between 0 and 255.</param>
            <param name="a">[Optional] An integer value representing the alpha (transparency) channel for the new <see cref="T:Microsoft.Xna.Framework.Color"/>. Value is clamped between 0 and 255. Set to 255 (fully opaque) by default.</param>
        </member>
        <member name="M:MonoGameEngine.Sprite.FillWithColour(Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            A method which sets the fill colour for this <see cref="T:MonoGameEngine.Sprite"/>, ignoring base transparency. Fill is 0, 0, 0, 0 by default.
            </summary>
            <param name="fillColour">The <see cref="T:Microsoft.Xna.Framework.Color"/> with which to fill the rendered <see cref="T:MonoGameEngine.Sprite"/> image.</param>
            <param name="effectStrength">[Optional] The amount (0.0f - 1.0f) that the fill colour should blend with the original <see cref="T:MonoGameEngine.Sprite"/>'s colours. Values are clamped automatically.</param>
        </member>
        <member name="M:MonoGameEngine.Sprite.FillWithColour(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            [Override] A method which sets the fill colour for this <see cref="T:MonoGameEngine.Sprite"/>, ignoring base transparency. Fill is 0, 0, 0, 0 by default.
            </summary>
            <param name="r">An integer value representing the red colour channel for the new <see cref="T:Microsoft.Xna.Framework.Color"/>. Value is clamped between 0 and 255.</param>
            <param name="b">An integer value representing the blue colour channel for the new <see cref="T:Microsoft.Xna.Framework.Color"/>. Value is clamped between 0 and 255.</param>
            <param name="g">An integer value representing the green colour channel for the new <see cref="T:Microsoft.Xna.Framework.Color"/>. Value is clamped between 0 and 255.</param>
            <param name="a">[Optional] An integer value representing the alpha (transparency) channel for the new <see cref="T:Microsoft.Xna.Framework.Color"/>. Value is clamped between 0 and 255. Set to 255 (fully opaque) by default.</param>
            <param name="effectStrength">[Optional] The amount (0.0f - 1.0f) that the fill colour should blend with the original <see cref="T:MonoGameEngine.Sprite"/>'s colours. Values are clamped automatically.</param>
        </member>
        <member name="M:MonoGameEngine.Sprite.GetName">
            <summary>
            A getter method which returns the filename of this <see cref="T:MonoGameEngine.Sprite"/>'s current image.
            </summary>
            <returns>A string value with the name of the current image of this <see cref="T:MonoGameEngine.Sprite"/>.</returns>
        </member>
        <member name="M:MonoGameEngine.Sprite.SetInWorldSpace(System.Boolean)">
            <summary>
            A setter method which sets whether or not this <see cref="T:MonoGameEngine.Sprite"/> should be drawn in world space or screen space.
            </summary>
            <param name="inWorldSpace">A boolean which represents if this <see cref="T:MonoGameEngine.Sprite"/> is in world space or not.</param>
        </member>
        <member name="M:MonoGameEngine.Sprite.SetTexture(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            A setter method which sets the image texture for this <see cref="T:MonoGameEngine.Sprite"/> to use.
            </summary>
            <param name="texture">The texture which should be used as an image for this <see cref="T:MonoGameEngine.Sprite"/>.</param>
        </member>
        <member name="M:MonoGameEngine.Sprite.GetTexture">
            <summary>
            A getter method that returns the image texture being used by this <see cref="T:MonoGameEngine.Sprite"/>.
            </summary>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> which represents the image used by this <see cref="T:MonoGameEngine.Sprite"/>.</returns>
        </member>
        <member name="M:MonoGameEngine.Sprite.GetPosition">
            <summary>
            A getter method which returns the position on-screen where this <see cref="T:MonoGameEngine.Sprite"/> will be rendered. 
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2"/> object representing the on-screen pixel location of this <see cref="T:MonoGameEngine.Sprite"/>'s origin.</returns>
        </member>
        <member name="M:MonoGameEngine.Sprite.SetPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            A setter method which allocates a new on-screen position for this <see cref="T:MonoGameEngine.Sprite"/> to render at.
            </summary>
            <param name="position">The new on-screen position for this <see cref="T:MonoGameEngine.Sprite"/>, in pixel co-ordinates.</param>
        </member>
        <member name="M:MonoGameEngine.Sprite.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>
            The rendering function of this <see cref="T:MonoGameEngine.Sprite"/> object. 
            </summary>
            <param name="spriteBatch">The current batch of sprites to be rendered this frame of the game.</param>
            <param name="position">The position onscreen to draw this <see cref="T:MonoGameEngine.Sprite"/> at.</param>
        </member>
        <member name="M:MonoGameEngine.Sprite.IsHorizontallyFlipped">
            <summary>
            A method which checks if this <see cref="T:MonoGameEngine.Sprite"/> has been set to be rendered with a flipped horizontal axis.
            </summary>
            <returns>Returns 'true' if this <see cref="T:MonoGameEngine.Sprite"/> is being drawn with a flipped horizontal axis. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.Sprite.IsVerticallyFlipped">
            <summary>
            A method which checks if this <see cref="T:MonoGameEngine.Sprite"/> has been set to be rendered with a flipped vertical axis.
            </summary>
            <returns>Returns 'true' if this <see cref="T:MonoGameEngine.Sprite"/> is being drawn with a flipped vertical axis. Otherwise, returns 'false'.</returns>
        </member>
        <member name="M:MonoGameEngine.Sprite.FlipHorizontally(System.Boolean)">
            <summary>
            A method which will allow the <see cref="T:MonoGameEngine.Sprite"/> to be rendered with a flipped horizontal axis. Useful for rendering sprites facing left or right.
            </summary>
            <param name="flip">Represents whether or not the <see cref="T:MonoGameEngine.Sprite"/> should be flipped horizontally or not.</param>
        </member>
        <member name="M:MonoGameEngine.Sprite.FlipVertically(System.Boolean)">
            <summary>
            A method which will allow the <see cref="T:MonoGameEngine.Sprite"/> to be rendered with a flipped vertical axis. Useful for rendering sprites facing up or down.
            </summary>
            <param name="flip">Represents whether or not the <see cref="T:MonoGameEngine.Sprite"/> should be flipped vertically or not.</param>
        </member>
        <member name="M:MonoGameEngine.Sprite.Rotate(System.Single)">
            <summary>
            Rotates the <see cref="T:MonoGameEngine.Sprite"/> around its origin by a given amount, in degrees.
            </summary>
            <param name="rotateAmount">The amount, in degrees, to rotate the sprite by.</param>
        </member>
        <member name="T:MonoGameEngine.FontEffect">
            <summary>Represents the additional effect to be applied to the font for this Text object.
            <br/>- <strong>None</strong> applies no additional effect to this Text object.
            <br/>- <strong>Blurry</strong> applies a blurring effect to this Text object.
            <br/>- <strong>Outline</strong> applies a black outline to this Text object.
            </summary>
        </member>
        <member name="F:MonoGameEngine.FontEffect.None">
            <summary>Applies no additional effect to this Text object</summary>
        </member>
        <member name="F:MonoGameEngine.FontEffect.Blurry">
            <summary>Applies a blurring effect to this Text object</summary>
        </member>
        <member name="F:MonoGameEngine.FontEffect.Outline">
            <summary>Applies a black outline to this Text object</summary>
        </member>
        <member name="T:MonoGameEngine.LineStyle">
            <summary>Represents the additional effect to be applied to the font for this Text object.
            <br/>- <strong>None</strong> applies no additional line effect to this Text object.
            <br/>- <strong>Strikethrough</strong> applies a line through the entirety of this Text object.
            <br/>- <strong>Underline</strong> applies an underline to the entirety of this Text object.
            </summary>
        </member>
        <member name="F:MonoGameEngine.LineStyle.None">
            <summary>Applies no additional line effect to this Text object</summary>
        </member>
        <member name="F:MonoGameEngine.LineStyle.Strikethrough">
            <summary>Applies a line through the entirety of this Text object</summary>
        </member>
        <member name="F:MonoGameEngine.LineStyle.Underline">
            <summary>Applies an underline to the entirety of this Text object</summary>
        </member>
        <member name="T:MonoGameEngine.Text">
            <summary>A class which can represent some text for displaying onscreen.</summary>
        </member>
        <member name="M:MonoGameEngine.Text.#ctor(System.String,System.Nullable{Microsoft.Xna.Framework.Color},System.String,System.Boolean,System.Boolean)">
            <summary>
            The constructor for this class.
            </summary>
            <param name="message">The text which will be printed to the screen.</param>
            <param name="colour">[Optional] The colour applied to the text. White by default.</param>
            <param name="fontName">[Optional] The font used for the text rendering. Arial by default.</param>
            <param name="isSystemFont">[Optional] Determines whether the font is located in a local folder or is an installed font.</param>
            <param name="inScreenSpace">[Optional] Should the <see cref="T:MonoGameEngine.Text"/> be drawn in world space or screen space?</param>
        </member>
        <member name="M:MonoGameEngine.Text.SetScale(System.Single)">
            <summary>
            A setter method for changing the scale factor of this rendered text.
            </summary>
            <param name="scale">The amount of scaling that should be applied to this <see cref="T:MonoGameEngine.Text"/>.</param>
        </member>
        <member name="M:MonoGameEngine.Text.GetScale">
            <summary>
            A getter method for returning the current scale factor for this <see cref="T:MonoGameEngine.Text"/> object.
            </summary>
            <returns>Returns the current scale factor.</returns>
        </member>
        <member name="M:MonoGameEngine.Text.SetOrigin(System.Single,System.Single)">
            <summary>
            A setter method which sets the origin point for this <see cref="T:MonoGameEngine.Text"/>. Values should be between 0.0f and 1.0f. Origin point is (0.0f, 0.0f) by default.
            </summary>
            <param name="originX">Fraction of the width of the text. Value should be between 0.0f and 1.0f.</param>
            <param name="originY">Fraction of the height of the text. Value should be between 0.0f and 1.0f.</param>
        </member>
        <member name="M:MonoGameEngine.Text.SetMessage(System.String)">
            <summary>
            A setter method for changing the string being displayed.
            </summary>
            <param name="newMessage">The string that should be displayed onscreen.</param>
        </member>
        <member name="M:MonoGameEngine.Text.SetColour(Microsoft.Xna.Framework.Color)">
            <summary>
            A setter method for changing the rendering colour of this <see cref="T:MonoGameEngine.Text"/>. <see cref="T:Microsoft.Xna.Framework.Color"/> is White by default.
            </summary>
            <param name="newColour">The colour that should be used for rendering.</param>
        </member>
        <member name="M:MonoGameEngine.Text.SetColour(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            [Override] A setter method for changing the rendering colour of this <see cref="T:MonoGameEngine.Text"/> using separate colour values. Colour is 255, 255, 255 by default.
            </summary>
            <param name="r">An integer value representing the red colour channel for the new <see cref="T:Microsoft.Xna.Framework.Color"/>. Value is clamped between 0 and 255.</param>
            <param name="b">An integer value representing the blue colour channel for the new <see cref="T:Microsoft.Xna.Framework.Color"/>. Value is clamped between 0 and 255.</param>
            <param name="g">An integer value representing the green colour channel for the new <see cref="T:Microsoft.Xna.Framework.Color"/>. Value is clamped between 0 and 255.</param>
            <param name="a">[Optional] An integer value representing the alpha (transparency) channel for the new <see cref="T:Microsoft.Xna.Framework.Color"/>. Value is clamped between 0 and 255. Set to 255 (fully opaque) by default.</param>
        </member>
        <member name="M:MonoGameEngine.Text.SetColourArray(Microsoft.Xna.Framework.Color[])">
            <summary>
            A setter method for applying a sequence of colours to the characters of this <see cref="T:MonoGameEngine.Text"/>. 
            <br/>If the message of this <see cref="T:MonoGameEngine.Text"/> object is longer than the sequence of colours provided, the sequence will repeat.
            </summary>
            <param name="colours">An array of <see cref="T:Microsoft.Xna.Framework.Color"/> objects, representing the desired colour of each character in order.</param>
        </member>
        <member name="M:MonoGameEngine.Text.SetPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            A setter method for changing the drawing location of this <see cref="T:MonoGameEngine.Text"/> object.
            </summary>
            <param name="newPosition">The position that this <see cref="T:MonoGameEngine.Text"/> object should be drawn at.</param>
        </member>
        <member name="M:MonoGameEngine.Text.GetPosition">
            <summary>
            A getter function for this <see cref="T:MonoGameEngine.Text"/>'s screen position.
            </summary>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2"/> object representing the on-screen position of this <see cref="T:MonoGameEngine.Text"/>.</returns>
        </member>
        <member name="M:MonoGameEngine.Text.SetRotation(System.Single)">
            <summary>
            A setter method for setting the rotation (in degrees) of this <see cref="T:MonoGameEngine.Text"/>.
            </summary>
            <param name="newRotation">The rotation (in degrees) to render this <see cref="T:MonoGameEngine.Text"/> at.</param>
        </member>
        <member name="M:MonoGameEngine.Text.GetRotation">
            <summary>
            A getter method which returns the current rotation (in degrees) that this <see cref="T:MonoGameEngine.Text"/>'s render will be drawn at.
            </summary>
            <returns>A floating-point value representing the rotation of this <see cref="T:MonoGameEngine.Text"/>'s tender.</returns>
        </member>
        <member name="M:MonoGameEngine.Text.SetCharacterSpacing(System.Single)">
            <summary>
            A setter method for setting the space between each character in this <see cref="T:MonoGameEngine.Text"/>'s render.
            </summary>
            <param name="newCharacterSpacing">The amount of space (in pixels) that should be added between each character of this <see cref="T:MonoGameEngine.Text"/>'s render.</param>
        </member>
        <member name="M:MonoGameEngine.Text.GetCharacterSpacing">
            <summary>
            A getter method which returns the spacing applied between each character in this <see cref="T:MonoGameEngine.Text"/>'s render.
            </summary>
            <returns>A floating-point value representing the space applied between the characters of this <see cref="T:MonoGameEngine.Text"/>'s render.</returns>
        </member>
        <member name="M:MonoGameEngine.Text.SetLineSpacing(System.Single)">
            <summary>
            A setter method for setting the space between each vertical line of characters in this <see cref="T:MonoGameEngine.Text"/>'s render.
            </summary>
            <param name="newLineSpacing">The amount of space (in pixels) that should be added between each vertical line of characters in this <see cref="T:MonoGameEngine.Text"/>'s render.</param>
        </member>
        <member name="M:MonoGameEngine.Text.GetLineSpacing">
            <summary>
            A getter method which returns the spacing applied between each vertical line of characters in this <see cref="T:MonoGameEngine.Text"/>'s render.
            </summary>
            <returns>A floating-point value representing the space applied between the vertical lines of characters in this <see cref="T:MonoGameEngine.Text"/>'s render.</returns>
        </member>
        <member name="M:MonoGameEngine.Text.SetFont(System.String,System.Boolean)">
            <summary>
            A setter method for applying a new font to this <see cref="T:MonoGameEngine.Text"/> object's string.
            </summary>
            <param name="fontName">The new font that should be applied.</param>
            <param name="isSystemFont">Determines whether to look for the font in the System fonts, or a local directory.</param>
        </member>
        <member name="M:MonoGameEngine.Text.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            The rendering function for this <see cref="T:MonoGameEngine.Text"/> object. <b>Called automatically by the game's Screen</b>.
            </summary>
            <param name="spriteBatch">The current batch of sprites for rendering in the MonoGame pipeline.</param>
        </member>
        <member name="M:MonoGameEngine.Text.GetBounds">
            <summary>
            A getter function for this <see cref="T:MonoGameEngine.Text"/>'s bounding box. 
            <br/><strong>Note: </strong> The calculated bounds returned by this method may not match the text rendered to the screen.
            </summary>
            <returns>The bounding box used by this <see cref="T:MonoGameEngine.Text"/> object.</returns>
        </member>
        <member name="M:MonoGameEngine.Text.SetLineStyle(MonoGameEngine.LineStyle,System.Int32)">
            <summary>
            A setter method for applying of a number of available <see cref="T:MonoGameEngine.LineStyle"/>s.
            </summary>
            <param name="lineStyle">Determines which line style should be applied to this <see cref="T:MonoGameEngine.Text"/> object.</param>
            <param name="lineHeight">[Optional] Determines the height of the strikethrough line, in pixels. 8px by default.</param>
        </member>
        <member name="M:MonoGameEngine.Text.SetFontEffect(MonoGameEngine.FontEffect,System.Int32)">
            <summary>
            A setter method for applying one of a number of available <see cref="T:MonoGameEngine.FontEffect"/>s, along with a 'strength' for the effect.
            </summary>
            <param name="effect">Determines which kind of <see cref="T:MonoGameEngine.FontEffect"/> to apply to this <see cref="T:MonoGameEngine.Text"/> object.</param>
            <param name="effectAmount">Determines how strongly to apply the specified effect. Value will be clamped between 0 and 10.</param>
        </member>
        <member name="M:MonoGameEngine.Text.GetFontName">
            <summary>
            A getter method for this <see cref="T:MonoGameEngine.Text"/>'s current font's name.
            </summary>
            <returns>A string value representing the name of the currently held font.</returns>
        </member>
        <member name="T:MonoGameEngine.TransitionType">
            <summary>Enum used to represent the animation style desired for a transition.
            <br/>- <strong>Fade</strong> will perform a fullscreen fade in to/out from a solid colour by adjusting the transparency level.
            <br/>- <strong>Fill</strong> will perform a scaling box fill in/out using a solid colour.
            <br/>- <strong>SwipeLeft</strong> will perform a swipe transition in a leftward motion, using a single colour panel.
            <br/>- <strong>SwipeRight</strong> will perform a swipe transition in a rightward motion, using a single colour panel.
            <br/>- <strong>SwipeUp</strong> will perform a swipe transition in a upward motion, using a single colour panel.
            <br/>- <strong>SwipeDown</strong> will perform a swipe transition in a downward motion, using a single colour panel.
            </summary>
        </member>
        <member name="F:MonoGameEngine.TransitionType.Fade">
            <summary>Performs a fullscreen fade in to/out from a solid colour by adjusting the transparency level.</summary>
        </member>
        <member name="F:MonoGameEngine.TransitionType.Fill">
            <summary>Performs a scaling box fill in/out using a solid colour.</summary>
        </member>
        <member name="F:MonoGameEngine.TransitionType.SwipeLeft">
            <summary>Performs a swipe transition in a leftward motion, using a single colour panel.</summary>
        </member>
        <member name="F:MonoGameEngine.TransitionType.SwipeRight">
            <summary>Performs a swipe transition in a rightward motion, using a single colour panel.</summary>
        </member>
        <member name="F:MonoGameEngine.TransitionType.SwipeUp">
            <summary>Performs a swipe transition in a upward motion, using a single colour panel.</summary>
        </member>
        <member name="F:MonoGameEngine.TransitionType.SwipeDown">
            <summary>Performs a swipe transition in a downward motion, using a single colour panel.</summary>
        </member>
        <member name="T:MonoGameEngine.Transition">
            <summary>A class which represents a transition special effect.</summary>
        </member>
        <member name="M:MonoGameEngine.Transition.#cctor">
            <summary>
            Private constructor necessary to instantiate the <see cref="T:MonoGameEngine.Transition"/> singleton.
            </summary>
        </member>
        <member name="P:MonoGameEngine.Transition.Instance">
            <summary>
            Provides access to this <see cref="T:MonoGameEngine.Transition"/> object. The main way to use the built-in screen transition functionality.
            </summary>
        </member>
        <member name="M:MonoGameEngine.Transition.Setup(MonoGameEngine.Core)">
            <summary>
            Provides essential setup for the <see cref="T:MonoGameEngine.Transition"/> object. <b>Automatically called by the game's <see cref="T:MonoGameEngine.Core"/></b>.
            </summary>
            <param name="core">The <see cref="T:MonoGameEngine.Core"/> of the game.</param>
        </member>
        <member name="M:MonoGameEngine.Transition.Update(System.Single)">
            <summary>
            Ensures the <see cref="T:MonoGameEngine.Transition"/> object is kept up-to-date. <b>Automatically called by the game's <see cref="T:MonoGameEngine.Core"/></b>.
            </summary>
            <param name="deltaTime">Time since the last frame.</param>
        </member>
        <member name="M:MonoGameEngine.Transition.Render(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Draws the <see cref="T:MonoGameEngine.Transition"/> panel texture above the rest of the game. <b>Automatically called by the game's <see cref="T:MonoGameEngine.Core"/></b>.
            </summary>
            <param name="spriteBatch">The common <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> used by the game.</param>
        </member>
        <member name="M:MonoGameEngine.Transition.ToScreen``1(MonoGameEngine.TransitionType,System.Nullable{Microsoft.Xna.Framework.Color},System.Single)">
            <summary>
            Start a transition, then swap to the desired <see cref="T:MonoGameEngine.Screen"/> once complete.
            </summary>
            <typeparam name="TScreen">The <see cref="T:MonoGameEngine.Screen"/> that should start next.</typeparam>
            <param name="type">[Optional] The type of transition that is desired. '<see cref="F:MonoGameEngine.TransitionType.Fade"/>' by default.</param>
            <param name="fadeColour">[Optional] The colour that the transition should use.</param>
            <param name="transitionDuration">[Optional] The time, in seconds, that the transition fadeout should take. 0.25 seconds by default.</param>
            <exception cref="T:MonoGameEngine.TransitionOverloadException">Thrown when a transition request is made while one is already underway.</exception>
        </member>
        <member name="M:MonoGameEngine.Transition.ToScreen(MonoGameEngine.Screen,MonoGameEngine.TransitionType,System.Nullable{Microsoft.Xna.Framework.Color},System.Single)">
            <summary>
            [Overload] Start a transition, then swap to the desired <see cref="T:MonoGameEngine.Screen"/> once complete. Allows a specific <see cref="T:MonoGameEngine.Screen"/> instance to be used once the transition is complete.
            </summary>
            <param name="newScreen"></param>
            <param name="type">[Optional] The type of transition that is desired. '<see cref="F:MonoGameEngine.TransitionType.Fade"/>' by default.</param>
            <param name="fadeColour">[Optional] The colour that the transition should use.</param>
            <param name="transitionDuration">[Optional] The time, in seconds, that the transition fadeout should take. 0.25 seconds by default.</param>
            <exception cref="T:MonoGameEngine.TransitionOverloadException">Thrown when a transition request is made while one is already underway.</exception>
        </member>
        <member name="M:MonoGameEngine.Transition.StartTransition(MonoGameEngine.TransitionType,System.Nullable{Microsoft.Xna.Framework.Color},System.Single)">
            <summary>
            Start a transition, without swapping to another <see cref="T:MonoGameEngine.Screen"/>.
            </summary>
            <param name="type">[Optional] The type of transition that is desired. '<see cref="F:MonoGameEngine.TransitionType.Fade"/>' by default.</param>
            <param name="fadeColour">[Optional] The <see cref="T:Microsoft.Xna.Framework.Color"/> that the transition should use.</param>
            <param name="transitionDuration">[Optional] The time, in seconds, that the transition fadeout should take. 0.25 seconds by default.</param>
        </member>
        <member name="M:MonoGameEngine.Transition.EndTransition(System.Nullable{MonoGameEngine.TransitionType},System.Nullable{System.Single})">
            <summary>
            Begins the 'end' animation of the chosen <see cref="T:MonoGameEngine.Transition"/>. Should be called in the Start() method of any <see cref="T:MonoGameEngine.Screen"/> that you have transitioned to.
            </summary>
            <param name="type">[Optional] The type of transition that is desired. '<see cref="F:MonoGameEngine.TransitionType.Fade"/>' by default.</param>
            <param name="transitionDuration">[Optional] The time, in seconds, that the transition fadein should take. 0.25 seconds by default.</param>
        </member>
        <member name="M:MonoGameEngine.Transition.IsActive">
            <summary>
            A getter method to check if a <see cref="T:MonoGameEngine.Transition"/> effect is currently running.
            </summary>
            <returns>Returns 'true' if an effect is running. Otherwise, returns 'false'.</returns>
        </member>
    </members>
</doc>
